{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"client/env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_GA_MEASUREMENT_ID: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}","size_bytes":166},"server/index.ts":{"content":"import express, { Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// ------------------------\n// Middleware\n// ------------------------\n\n// Parse JSON and URL-encoded requests\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Request logging middleware\napp.use((req: Request, res: Response, next: NextFunction) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 120) {\n        logLine = logLine.slice(0, 119) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// ------------------------\n// Health Check Endpoint\n// ------------------------\napp.get(\"/healthz\", (_req: Request, res: Response) => {\n  res.status(200).send(\"OK\");\n});\n\n// ------------------------\n// Main Async Function\n// ------------------------\n\n(async () => {\n  try {\n    // Register API routes\n    await registerRoutes(app);\n\n    // Error handling middleware\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n      log(`Error occurred: ${message}`);\n    });\n\n    // Setup Vite dev server or serve static files\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app); // Starts Vite dev server internally\n    } else {\n      serveStatic(app); // Serve production files from dist/public\n    }\n\n    // Port configuration\n    const port = parseInt(process.env.PORT || \"5000\", 10);\n\n    // Start Express server\n    app.listen(port, () => {\n      log(`🚀 Server is running on http://localhost:${port} [${app.get(\"env\")}]`);\n    });\n  } catch (err) {\n    console.error(\"❌ Failed to start server:\", err);\n    process.exit(1);\n  }\n})();\n","size_bytes":2458},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { randomUUID } from \"crypto\";\nimport { storage } from \"./storage\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Allow all file types for now\n    cb(null, true);\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // File conversion endpoint\n  app.post('/api/convert', upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No file uploaded' });\n      }\n\n      const { targetFormat, quality = 'medium', compress = 'false', emailResult = 'false' } = req.body;\n      \n      if (!targetFormat) {\n        return res.status(400).json({ error: 'Target format is required' });\n      }\n\n      const sessionId = (req as any).sessionID || randomUUID();\n      const originalFileName = req.file.originalname;\n      const originalFormat = path.extname(originalFileName).substring(1).toLowerCase();\n      const fileSize = req.file.size;\n\n      // Create conversion record\n      const conversion = await storage.createConversion({\n        sessionId,\n        originalFileName,\n        originalFormat,\n        targetFormat,\n        fileSize,\n        status: 'processing',\n        downloadPath: null,\n        metadata: {\n          quality,\n          compress: compress === 'true',\n          emailResult: emailResult === 'true',\n          uploadPath: req.file.path,\n        },\n      });\n\n      // Store file info for async processing\n      const uploadedFile = req.file;\n      \n      // In a real implementation, this would trigger actual file conversion\n      // For now, we'll simulate the conversion process\n      setTimeout(async () => {\n        try {\n          // Simulate conversion by copying the file with new extension\n          const convertedFileName = `${path.parse(originalFileName).name}.${targetFormat}`;\n          const downloadPath = `downloads/${randomUUID()}_${convertedFileName}`;\n          const fullDownloadPath = path.join(process.cwd(), downloadPath);\n          \n          // Ensure downloads directory exists\n          const downloadsDir = path.dirname(fullDownloadPath);\n          if (!fs.existsSync(downloadsDir)) {\n            fs.mkdirSync(downloadsDir, { recursive: true });\n          }\n\n          // Copy file to downloads directory (simulating conversion)\n          if (uploadedFile) {\n            fs.copyFileSync(uploadedFile.path, fullDownloadPath);\n          }\n          \n          // Update conversion status\n          await storage.updateConversion(conversion.id, {\n            status: 'completed',\n            downloadPath: downloadPath,\n            completedAt: new Date(),\n          });\n\n          // Clean up uploaded file\n          if (uploadedFile) {\n            fs.unlinkSync(uploadedFile.path);\n          }\n        } catch (error) {\n          console.error('Conversion failed:', error);\n          await storage.updateConversion(conversion.id, {\n            status: 'failed',\n            completedAt: new Date(),\n          });\n        }\n      }, 2000); // Simulate 2-second conversion time\n\n      res.json({\n        conversionId: conversion.id,\n        status: 'processing',\n        message: 'File uploaded successfully. Conversion in progress.',\n      });\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Check conversion status\n  app.get('/api/conversion/:id', async (req, res) => {\n    try {\n      const conversion = await storage.getConversion(req.params.id);\n      \n      if (!conversion) {\n        return res.status(404).json({ error: 'Conversion not found' });\n      }\n\n      if (conversion.status === 'completed' && conversion.downloadPath) {\n        const convertedFileName = `${path.parse(conversion.originalFileName).name}.${conversion.targetFormat}`;\n        res.json({\n          id: conversion.id,\n          status: conversion.status,\n          downloadUrl: `/api/download/${conversion.id}`,\n          fileName: convertedFileName,\n          originalFileName: conversion.originalFileName,\n          targetFormat: conversion.targetFormat,\n        });\n      } else {\n        res.json({\n          id: conversion.id,\n          status: conversion.status,\n          originalFileName: conversion.originalFileName,\n          targetFormat: conversion.targetFormat,\n        });\n      }\n    } catch (error) {\n      console.error('Status check error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Download converted file\n  app.get('/api/download/:id', async (req, res) => {\n    try {\n      const conversion = await storage.getConversion(req.params.id);\n      \n      if (!conversion || conversion.status !== 'completed' || !conversion.downloadPath) {\n        return res.status(404).json({ error: 'File not found or not ready' });\n      }\n\n      const filePath = path.join(process.cwd(), conversion.downloadPath);\n      \n      if (!fs.existsSync(filePath)) {\n        return res.status(404).json({ error: 'File not found' });\n      }\n\n      const convertedFileName = `${path.parse(conversion.originalFileName).name}.${conversion.targetFormat}`;\n      \n      res.setHeader('Content-Disposition', `attachment; filename=\"${convertedFileName}\"`);\n      res.setHeader('Content-Type', 'application/octet-stream');\n      \n      const fileStream = fs.createReadStream(filePath);\n      fileStream.pipe(res);\n\n      // Clean up file after download\n      fileStream.on('end', () => {\n        setTimeout(() => {\n          try {\n            fs.unlinkSync(filePath);\n          } catch (error) {\n            console.error('Failed to delete file:', error);\n          }\n        }, 1000); // Delete after 1 second to ensure download completed\n      });\n\n    } catch (error) {\n      console.error('Download error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Contact form endpoint\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const { name, email, subject, category, message } = req.body;\n\n      if (!name || !email || !subject || !message) {\n        return res.status(400).json({ error: 'Required fields are missing' });\n      }\n\n      // In a real implementation, this would send an email or save to database\n      console.log('Contact form submission:', {\n        name,\n        email,\n        subject,\n        category,\n        message,\n        timestamp: new Date().toISOString(),\n      });\n\n      res.json({ \n        success: true, \n        message: 'Message sent successfully' \n      });\n\n    } catch (error) {\n      console.error('Contact form error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get user's recent conversions\n  app.get('/api/conversions', async (req, res) => {\n    try {\n      const sessionId = (req as any).sessionID || '';\n      const conversions = await storage.getConversionsBySession(sessionId);\n      \n      res.json(conversions.map(conversion => ({\n        id: conversion.id,\n        originalFileName: conversion.originalFileName,\n        originalFormat: conversion.originalFormat,\n        targetFormat: conversion.targetFormat,\n        status: conversion.status,\n        createdAt: conversion.createdAt,\n        completedAt: conversion.completedAt,\n      })));\n\n    } catch (error) {\n      console.error('Conversions fetch error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Cleanup old files (run periodically)\n  const cleanupOldFiles = () => {\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    const downloadsDir = path.join(process.cwd(), 'downloads');\n    \n    const cleanupDirectory = (dir: string) => {\n      if (!fs.existsSync(dir)) return;\n      \n      const files = fs.readdirSync(dir);\n      const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);\n      \n      files.forEach(file => {\n        const filePath = path.join(dir, file);\n        const stats = fs.statSync(filePath);\n        \n        if (stats.mtime.getTime() < oneDayAgo) {\n          try {\n            fs.unlinkSync(filePath);\n            console.log(`Cleaned up old file: ${filePath}`);\n          } catch (error) {\n            console.error(`Failed to cleanup file ${filePath}:`, error);\n          }\n        }\n      });\n    };\n\n    cleanupDirectory(uploadsDir);\n    cleanupDirectory(downloadsDir);\n  };\n\n  // Run cleanup every hour\n  setInterval(cleanupOldFiles, 60 * 60 * 1000);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8783},"server/storage.ts":{"content":"import { type User, type InsertUser, type Conversion, type InsertConversion } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Conversion methods\n  createConversion(conversion: InsertConversion): Promise<Conversion>;\n  getConversion(id: string): Promise<Conversion | undefined>;\n  updateConversion(id: string, updates: Partial<Conversion>): Promise<Conversion | undefined>;\n  getConversionsBySession(sessionId: string): Promise<Conversion[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private conversions: Map<string, Conversion>;\n\n  constructor() {\n    this.users = new Map();\n    this.conversions = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      email: insertUser.email || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createConversion(insertConversion: InsertConversion): Promise<Conversion> {\n    const id = randomUUID();\n    const conversion: Conversion = {\n      ...insertConversion,\n      id,\n      createdAt: new Date(),\n      completedAt: null,\n      metadata: insertConversion.metadata || null,\n      downloadPath: insertConversion.downloadPath || null,\n    };\n    this.conversions.set(id, conversion);\n    return conversion;\n  }\n\n  async getConversion(id: string): Promise<Conversion | undefined> {\n    return this.conversions.get(id);\n  }\n\n  async updateConversion(id: string, updates: Partial<Conversion>): Promise<Conversion | undefined> {\n    const existing = this.conversions.get(id);\n    if (!existing) {\n      return undefined;\n    }\n    \n    const updated: Conversion = { ...existing, ...updates };\n    this.conversions.set(id, updated);\n    return updated;\n  }\n\n  async getConversionsBySession(sessionId: string): Promise<Conversion[]> {\n    return Array.from(this.conversions.values())\n      .filter(conversion => conversion.sessionId === sessionId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, 10); // Return last 10 conversions\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2725},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversions = pgTable(\"conversions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  originalFileName: text(\"original_file_name\").notNull(),\n  originalFormat: text(\"original_format\").notNull(),\n  targetFormat: text(\"target_format\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  status: text(\"status\").notNull(), // 'pending', 'processing', 'completed', 'failed'\n  downloadPath: text(\"download_path\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  metadata: json(\"metadata\"), // Additional conversion settings\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n});\n\nexport const insertConversionSchema = createInsertSchema(conversions).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConversion = z.infer<typeof insertConversionSchema>;\nexport type Conversion = typeof conversions.$inferSelect;\n","size_bytes":1624},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\n\n// Pages\nimport Home from \"@/pages/home\";\nimport Converter from \"@/pages/converter\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-of-service\" component={TermsOfService} />\n      \n      {/* Tool-specific routes */}\n      <Route path=\"/pdf-to-word\" component={Converter} />\n      <Route path=\"/word-to-pdf\" component={Converter} />\n      <Route path=\"/pdf-to-excel\" component={Converter} />\n      <Route path=\"/excel-to-pdf\" component={Converter} />\n      <Route path=\"/pdf-to-ppt\" component={Converter} />\n      <Route path=\"/ppt-to-pdf\" component={Converter} />\n      <Route path=\"/pdf-to-txt\" component={Converter} />\n      <Route path=\"/excel-to-csv\" component={Converter} />\n      <Route path=\"/jpg-to-png\" component={Converter} />\n      <Route path=\"/png-to-jpg\" component={Converter} />\n      <Route path=\"/jpg-to-webp\" component={Converter} />\n      <Route path=\"/png-to-pdf\" component={Converter} />\n      <Route path=\"/svg-to-png\" component={Converter} />\n      <Route path=\"/heic-to-jpg\" component={Converter} />\n      <Route path=\"/gif-to-mp4\" component={Converter} />\n      <Route path=\"/image-compressor\" component={Converter} />\n      <Route path=\"/mp3-to-wav\" component={Converter} />\n      <Route path=\"/wav-to-mp3\" component={Converter} />\n      <Route path=\"/flac-to-mp3\" component={Converter} />\n      <Route path=\"/m4a-to-mp3\" component={Converter} />\n      <Route path=\"/ogg-to-mp3\" component={Converter} />\n      <Route path=\"/mp3-to-aac\" component={Converter} />\n      <Route path=\"/audio-to-text\" component={Converter} />\n      <Route path=\"/text-to-speech\" component={Converter} />\n      <Route path=\"/mp4-to-avi\" component={Converter} />\n      <Route path=\"/avi-to-mp4\" component={Converter} />\n      <Route path=\"/mp4-to-mov\" component={Converter} />\n      <Route path=\"/mp4-to-mkv\" component={Converter} />\n      <Route path=\"/mp4-to-webm\" component={Converter} />\n      <Route path=\"/mp4-to-gif\" component={Converter} />\n      <Route path=\"/extract-mp3-from-mp4\" component={Converter} />\n      <Route path=\"/compress-mp4\" component={Converter} />\n      <Route path=\"/zip-to-rar\" component={Converter} />\n      <Route path=\"/rar-to-zip\" component={Converter} />\n      <Route path=\"/zip-to-7z\" component={Converter} />\n      <Route path=\"/tar-to-zip\" component={Converter} />\n      <Route path=\"/iso-to-zip\" component={Converter} />\n      <Route path=\"/file-compressor\" component={Converter} />\n      <Route path=\"/image-to-text\" component={Converter} />\n      <Route path=\"/speech-to-text\" component={Converter} />\n      <Route path=\"/epub-to-pdf\" component={Converter} />\n      <Route path=\"/mobi-to-pdf\" component={Converter} />\n      \n      {/* Tools page */}\n      <Route path=\"/tools\" component={Home} />\n      \n      {/* Category pages */}\n      <Route path=\"/tools/:category\" component={Home} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Router />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4014},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 8px;\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(142.1 76.2% 36.3%);\n  --accent-foreground: hsl(355.7 100% 97.3%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(210 40% 96%);\n  --sidebar-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-primary: hsl(221.2 83.2% 53.3%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(221.2 83.2% 53.3%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221.2 83.2% 53.3%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(142.1 70.6% 45.3%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.0%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.drag-over {\n  @apply border-primary border-2 border-dashed bg-primary bg-opacity-5;\n}\n\n.file-preview {\n  transition: transform 0.2s ease-in-out;\n}\n\n.file-preview:hover {\n  transform: translateY(-2px);\n}\n\n.progress-bar {\n  background: linear-gradient(90deg, var(--primary) var(--progress, 0%), transparent var(--progress, 0%));\n}\n\n.ad-banner {\n  @apply bg-muted bg-opacity-50 border border-border rounded-lg p-4 text-center text-muted-foreground;\n}\n","size_bytes":2900},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/file-converter.ts":{"content":"import sharp from 'sharp';\nimport ffmpeg from 'fluent-ffmpeg';\nimport LibreOffice from 'libreoffice-convert';\nimport { promisify } from 'util';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { exec } from 'child_process';\nimport archiver from 'archiver';\nimport unzipper from 'unzipper';\n\nconst convertAsync = promisify(LibreOffice.convert);\nconst execAsync = promisify(exec);\n\nexport interface ConversionOptions {\n  quality: 'low' | 'medium' | 'high';\n  compress: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport class FileConverterService {\n  private static getQualitySettings(quality: 'low' | 'medium' | 'high') {\n    switch (quality) {\n      case 'low':\n        return { imageQuality: 60, videoBitrate: '500k', audioBitrate: '64k' };\n      case 'medium':\n        return { imageQuality: 80, videoBitrate: '1000k', audioBitrate: '128k' };\n      case 'high':\n        return { imageQuality: 95, videoBitrate: '2000k', audioBitrate: '192k' };\n    }\n  }\n\n  // Document Conversions\n  static async convertDocument(\n    inputPath: string,\n    outputPath: string,\n    targetFormat: string,\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const inputBuffer = fs.readFileSync(inputPath);\n    \n    try {\n      const outputBuffer = await convertAsync(inputBuffer, `.${targetFormat}`, undefined);\n      fs.writeFileSync(outputPath, outputBuffer);\n    } catch (error) {\n      // Fallback to pandoc for some conversions\n      const inputExt = path.extname(inputPath).substring(1);\n      await execAsync(`pandoc \"${inputPath}\" -f ${inputExt} -t ${targetFormat} -o \"${outputPath}\"`);\n    }\n  }\n\n  // Image Conversions\n  static async convertImage(\n    inputPath: string,\n    outputPath: string,\n    targetFormat: string,\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const qualitySettings = this.getQualitySettings(options.quality);\n    \n    let sharpInstance = sharp(inputPath);\n    \n    // Apply compression if requested\n    if (options.compress) {\n      sharpInstance = sharpInstance.jpeg({ quality: qualitySettings.imageQuality - 20 });\n    }\n\n    switch (targetFormat.toLowerCase()) {\n      case 'jpg':\n      case 'jpeg':\n        await sharpInstance.jpeg({ quality: qualitySettings.imageQuality }).toFile(outputPath);\n        break;\n      case 'png':\n        await sharpInstance.png({ \n          quality: qualitySettings.imageQuality,\n          compressionLevel: options.compress ? 9 : 6 \n        }).toFile(outputPath);\n        break;\n      case 'webp':\n        await sharpInstance.webp({ quality: qualitySettings.imageQuality }).toFile(outputPath);\n        break;\n      case 'pdf':\n        // Convert image to PDF using sharp and PDFKit would be complex\n        // For now, use imagemagick\n        await execAsync(`convert \"${inputPath}\" \"${outputPath}\"`);\n        break;\n      default:\n        await sharpInstance.toFormat(targetFormat as any).toFile(outputPath);\n    }\n  }\n\n  // Audio Conversions\n  static async convertAudio(\n    inputPath: string,\n    outputPath: string,\n    targetFormat: string,\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const qualitySettings = this.getQualitySettings(options.quality);\n    \n    return new Promise((resolve, reject) => {\n      let command = ffmpeg(inputPath)\n        .audioBitrate(qualitySettings.audioBitrate)\n        .format(targetFormat);\n\n      // Apply compression settings\n      if (options.compress) {\n        command = command.audioBitrate('64k');\n      }\n\n      command\n        .save(outputPath)\n        .on('end', () => resolve())\n        .on('error', reject);\n    });\n  }\n\n  // Video Conversions\n  static async convertVideo(\n    inputPath: string,\n    outputPath: string,\n    targetFormat: string,\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const qualitySettings = this.getQualitySettings(options.quality);\n    \n    return new Promise((resolve, reject) => {\n      let command = ffmpeg(inputPath)\n        .videoBitrate(qualitySettings.videoBitrate)\n        .audioBitrate(qualitySettings.audioBitrate)\n        .format(targetFormat);\n\n      // Apply compression settings\n      if (options.compress) {\n        command = command\n          .videoBitrate('300k')\n          .size('720x?')\n          .aspect('16:9');\n      }\n\n      command\n        .save(outputPath)\n        .on('end', () => resolve())\n        .on('error', reject);\n    });\n  }\n\n  // Extract audio from video\n  static async extractAudio(\n    inputPath: string,\n    outputPath: string,\n    targetFormat: string = 'mp3',\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const qualitySettings = this.getQualitySettings(options.quality);\n    \n    return new Promise((resolve, reject) => {\n      ffmpeg(inputPath)\n        .noVideo()\n        .audioBitrate(qualitySettings.audioBitrate)\n        .format(targetFormat)\n        .save(outputPath)\n        .on('end', () => resolve())\n        .on('error', reject);\n    });\n  }\n\n  // Archive Operations\n  static async createArchive(\n    inputPaths: string[],\n    outputPath: string,\n    format: 'zip' | '7z' | 'tar' = 'zip'\n  ): Promise<void> {\n    if (format === 'zip') {\n      return new Promise((resolve, reject) => {\n        const output = fs.createWriteStream(outputPath);\n        const archive = archiver('zip', { zlib: { level: 9 } });\n\n        output.on('close', resolve);\n        archive.on('error', reject);\n        archive.pipe(output);\n\n        inputPaths.forEach(inputPath => {\n          if (fs.statSync(inputPath).isDirectory()) {\n            archive.directory(inputPath, path.basename(inputPath));\n          } else {\n            archive.file(inputPath, { name: path.basename(inputPath) });\n          }\n        });\n\n        archive.finalize();\n      });\n    } else {\n      // Use 7z command for other formats\n      const filesList = inputPaths.map(p => `\"${p}\"`).join(' ');\n      await execAsync(`7z a \"${outputPath}\" ${filesList}`);\n    }\n  }\n\n  static async extractArchive(\n    inputPath: string,\n    outputDir: string\n  ): Promise<void> {\n    const ext = path.extname(inputPath).toLowerCase();\n    \n    if (ext === '.zip') {\n      return new Promise((resolve, reject) => {\n        fs.createReadStream(inputPath)\n          .pipe(unzipper.Extract({ path: outputDir }))\n          .on('close', resolve)\n          .on('error', reject);\n      });\n    } else {\n      // Use 7z for other archive formats\n      await execAsync(`7z x \"${inputPath}\" -o\"${outputDir}\"`);\n    }\n  }\n\n  // OCR (Image to Text)\n  static async imageToText(inputPath: string): Promise<string> {\n    try {\n      // Use tesseract for OCR\n      const { stdout } = await execAsync(`tesseract \"${inputPath}\" stdout`);\n      return stdout;\n    } catch (error) {\n      throw new Error('OCR processing failed');\n    }\n  }\n\n  // Speech to Text (would require additional service like Google Speech-to-Text)\n  static async speechToText(inputPath: string): Promise<string> {\n    // This would require integration with speech recognition service\n    // For now, return placeholder\n    throw new Error('Speech to text conversion requires external service integration');\n  }\n\n  // Text to Speech\n  static async textToSpeech(text: string, outputPath: string): Promise<void> {\n    // This would require integration with TTS service\n    // For now, use espeak if available\n    try {\n      await execAsync(`espeak \"${text}\" --stdout > \"${outputPath}\"`);\n    } catch (error) {\n      throw new Error('Text to speech conversion requires espeak or external service');\n    }\n  }\n\n  // Main conversion dispatcher\n  static async convertFile(\n    inputPath: string,\n    outputPath: string,\n    fromFormat: string,\n    toFormat: string,\n    options: ConversionOptions = { quality: 'medium', compress: false }\n  ): Promise<void> {\n    const imageFormats = ['jpg', 'jpeg', 'png', 'webp', 'bmp', 'tiff', 'svg', 'gif', 'heic'];\n    const audioFormats = ['mp3', 'wav', 'aac', 'flac', 'ogg', 'm4a'];\n    const videoFormats = ['mp4', 'avi', 'mov', 'mkv', 'webm', 'wmv', 'flv'];\n    const documentFormats = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'rtf', 'odt'];\n    const archiveFormats = ['zip', 'rar', '7z', 'tar', 'gz', 'iso'];\n\n    // Special cases first\n    if (fromFormat === 'gif' && toFormat === 'mp4') {\n      return this.convertVideo(inputPath, outputPath, toFormat, options);\n    }\n\n    if (videoFormats.includes(fromFormat) && toFormat === 'mp3') {\n      return this.extractAudio(inputPath, outputPath, toFormat, options);\n    }\n\n    if (imageFormats.includes(fromFormat) && toFormat === 'text') {\n      const text = await this.imageToText(inputPath);\n      fs.writeFileSync(outputPath, text);\n      return;\n    }\n\n    // Standard conversions\n    if (imageFormats.includes(fromFormat) && imageFormats.includes(toFormat)) {\n      return this.convertImage(inputPath, outputPath, toFormat, options);\n    }\n\n    if (audioFormats.includes(fromFormat) && audioFormats.includes(toFormat)) {\n      return this.convertAudio(inputPath, outputPath, toFormat, options);\n    }\n\n    if (videoFormats.includes(fromFormat) && videoFormats.includes(toFormat)) {\n      return this.convertVideo(inputPath, outputPath, toFormat, options);\n    }\n\n    if (documentFormats.includes(fromFormat) && documentFormats.includes(toFormat)) {\n      return this.convertDocument(inputPath, outputPath, toFormat, options);\n    }\n\n    if (archiveFormats.includes(fromFormat) && archiveFormats.includes(toFormat)) {\n      // Extract and repackage\n      const tempDir = path.join(path.dirname(outputPath), 'temp_' + Date.now());\n      await this.extractArchive(inputPath, tempDir);\n      \n      const files = fs.readdirSync(tempDir).map(f => path.join(tempDir, f));\n      await this.createArchive(files, outputPath, toFormat as any);\n      \n      // Cleanup temp directory\n      fs.rmSync(tempDir, { recursive: true });\n      return;\n    }\n\n    throw new Error(`Conversion from ${fromFormat} to ${toFormat} is not supported`);\n  }\n}\n","size_bytes":10084},"client/src/hooks/use-file-converter.tsx":{"content":"import { useState, useCallback } from 'react';\nimport { FileUpload, ConversionSettings } from '@/types/converter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function useFileConverter() {\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isConverting, setIsConverting] = useState(false);\n  const { toast } = useToast();\n\n  const addFiles = useCallback((newFiles: File[]) => {\n    const fileUploads: FileUpload[] = newFiles.map((file) => ({\n      id: crypto.randomUUID(),\n      file,\n      status: 'pending',\n      progress: 0,\n    }));\n\n    setFiles((prev) => [...prev, ...fileUploads]);\n  }, []);\n\n  const removeFile = useCallback((fileId: string) => {\n    setFiles((prev) => prev.filter((f) => f.id !== fileId));\n  }, []);\n\n  const updateFileStatus = useCallback((fileId: string, status: FileUpload['status'], progress?: number, error?: string) => {\n    setFiles((prev) =>\n      prev.map((file) =>\n        file.id === fileId\n          ? { ...file, status, progress: progress ?? file.progress, error }\n          : file\n      )\n    );\n  }, []);\n\n  const pollConversionStatus = useCallback(async (fileId: string, conversionId: string) => {\n    const maxAttempts = 30; // 30 seconds max\n    let attempts = 0;\n\n    const checkStatus = async (): Promise<void> => {\n      try {\n        const response = await fetch(`/api/conversion/${conversionId}`);\n        if (!response.ok) {\n          throw new Error('Failed to check conversion status');\n        }\n\n        const result = await response.json();\n        \n        if (result.status === 'completed' && result.downloadUrl) {\n          updateFileStatus(fileId, 'completed', 100);\n          setFiles((prev) =>\n            prev.map((file) =>\n              file.id === fileId\n                ? {\n                    ...file,\n                    downloadUrl: result.downloadUrl,\n                    convertedFileName: result.fileName,\n                  }\n                : file\n            )\n          );\n        } else if (result.status === 'failed') {\n          updateFileStatus(fileId, 'failed', 0, 'Conversion failed');\n        } else if (result.status === 'processing' && attempts < maxAttempts) {\n          attempts++;\n          setTimeout(checkStatus, 1000); // Check again in 1 second\n        } else if (attempts >= maxAttempts) {\n          updateFileStatus(fileId, 'failed', 0, 'Conversion timeout');\n        }\n      } catch (error) {\n        updateFileStatus(fileId, 'failed', 0, error instanceof Error ? error.message : 'Status check failed');\n      }\n    };\n\n    checkStatus();\n  }, [updateFileStatus]);\n\n  const convertFiles = useCallback(async (settings: ConversionSettings) => {\n    if (files.length === 0) {\n      toast({\n        title: \"No files selected\",\n        description: \"Please select files to convert.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsConverting(true);\n\n    try {\n      for (const fileUpload of files) {\n        updateFileStatus(fileUpload.id, 'processing');\n\n        const formData = new FormData();\n        formData.append('file', fileUpload.file);\n        formData.append('targetFormat', settings.targetFormat);\n        formData.append('quality', settings.quality);\n        formData.append('compress', settings.compress.toString());\n        formData.append('emailResult', settings.emailResult.toString());\n\n        try {\n          const response = await fetch('/api/convert', {\n            method: 'POST',\n            body: formData,\n            credentials: 'include',\n          });\n\n          if (!response.ok) {\n            throw new Error(`Conversion failed: ${response.statusText}`);\n          }\n\n          const result = await response.json();\n          \n          // Store conversionId and start polling for status\n          setFiles((prev) =>\n            prev.map((file) =>\n              file.id === fileUpload.id\n                ? {\n                    ...file,\n                    conversionId: result.conversionId,\n                  }\n                : file\n            )\n          );\n\n          // Poll for conversion status\n          pollConversionStatus(fileUpload.id, result.conversionId);\n\n        } catch (error) {\n          updateFileStatus(fileUpload.id, 'failed', 0, error instanceof Error ? error.message : 'Conversion failed');\n        }\n      }\n\n      toast({\n        title: \"Conversion complete\",\n        description: \"Your files have been converted successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Conversion failed\",\n        description: error instanceof Error ? error.message : \"An error occurred during conversion.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConverting(false);\n    }\n  }, [files, toast, updateFileStatus, pollConversionStatus]);\n\n  const resetConverter = useCallback(() => {\n    setFiles([]);\n    setIsConverting(false);\n  }, []);\n\n  const getCompletedFiles = useCallback(() => {\n    return files.filter((file) => file.status === 'completed' && file.downloadUrl);\n  }, [files]);\n\n  return {\n    files,\n    isConverting,\n    addFiles,\n    removeFile,\n    convertFiles,\n    resetConverter,\n    getCompletedFiles,\n  };\n}\n","size_bytes":5156},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ntype ThemeContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      return (localStorage.getItem('theme') as Theme) || 'light';\n    }\n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1176},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/conversion-tools.ts":{"content":"import { ConversionTool, ConversionCategory } from '@/types/converter';\n\nexport type { ConversionCategory };\n\nexport const conversionTools: ConversionTool[] = [\n  // Documents\n  {\n    id: 'pdf-to-word',\n    name: 'PDF to WORD',\n    description: 'Convert PDF documents to editable Word format',\n    fromFormat: 'pdf',\n    toFormat: 'docx',\n    category: 'documents',\n    icon: 'file-pdf',\n    iconColor: 'text-red-500',\n    path: '/pdf-to-word',\n    popular: true,\n  },\n  {\n    id: 'word-to-pdf',\n    name: 'WORD to PDF',\n    description: 'Convert Word documents to PDF format',\n    fromFormat: 'docx',\n    toFormat: 'pdf',\n    category: 'documents',\n    icon: 'file-word',\n    iconColor: 'text-blue-500',\n    path: '/word-to-pdf',\n    popular: true,\n  },\n  {\n    id: 'pdf-to-excel',\n    name: 'PDF to EXCEL',\n    description: 'Convert PDF to Excel spreadsheet',\n    fromFormat: 'pdf',\n    toFormat: 'xlsx',\n    category: 'documents',\n    icon: 'file-excel',\n    iconColor: 'text-green-500',\n    path: '/pdf-to-excel',\n  },\n  {\n    id: 'excel-to-pdf',\n    name: 'EXCEL to PDF',\n    description: 'Convert Excel spreadsheets to PDF',\n    fromFormat: 'xlsx',\n    toFormat: 'pdf',\n    category: 'documents',\n    icon: 'file-excel',\n    iconColor: 'text-green-500',\n    path: '/excel-to-pdf',\n  },\n  {\n    id: 'pdf-to-ppt',\n    name: 'PDF to PPT',\n    description: 'Convert PDF to PowerPoint presentation',\n    fromFormat: 'pdf',\n    toFormat: 'pptx',\n    category: 'documents',\n    icon: 'file-powerpoint',\n    iconColor: 'text-orange-500',\n    path: '/pdf-to-ppt',\n  },\n  {\n    id: 'ppt-to-pdf',\n    name: 'PPT to PDF',\n    description: 'Convert PowerPoint to PDF format',\n    fromFormat: 'pptx',\n    toFormat: 'pdf',\n    category: 'documents',\n    icon: 'file-powerpoint',\n    iconColor: 'text-orange-500',\n    path: '/ppt-to-pdf',\n  },\n  {\n    id: 'pdf-to-txt',\n    name: 'PDF to TXT',\n    description: 'Extract text from PDF documents',\n    fromFormat: 'pdf',\n    toFormat: 'txt',\n    category: 'documents',\n    icon: 'file-alt',\n    iconColor: 'text-gray-500',\n    path: '/pdf-to-txt',\n  },\n  {\n    id: 'excel-to-csv',\n    name: 'EXCEL to CSV',\n    description: 'Convert Excel files to CSV format',\n    fromFormat: 'xlsx',\n    toFormat: 'csv',\n    category: 'documents',\n    icon: 'file-csv',\n    iconColor: 'text-green-600',\n    path: '/excel-to-csv',\n  },\n\n  // Images\n  {\n    id: 'jpg-to-png',\n    name: 'JPG to PNG',\n    description: 'Convert JPEG images to PNG format',\n    fromFormat: 'jpg',\n    toFormat: 'png',\n    category: 'images',\n    icon: 'image',\n    iconColor: 'text-blue-500',\n    path: '/jpg-to-png',\n    popular: true,\n  },\n  {\n    id: 'png-to-jpg',\n    name: 'PNG to JPG',\n    description: 'Convert PNG images to JPEG format',\n    fromFormat: 'png',\n    toFormat: 'jpg',\n    category: 'images',\n    icon: 'image',\n    iconColor: 'text-purple-500',\n    path: '/png-to-jpg',\n    popular: true,\n  },\n  {\n    id: 'jpg-to-webp',\n    name: 'JPG to WEBP',\n    description: 'Convert JPEG to modern WebP format',\n    fromFormat: 'jpg',\n    toFormat: 'webp',\n    category: 'images',\n    icon: 'image',\n    iconColor: 'text-green-500',\n    path: '/jpg-to-webp',\n  },\n  {\n    id: 'png-to-pdf',\n    name: 'PNG to PDF',\n    description: 'Convert PNG images to PDF documents',\n    fromFormat: 'png',\n    toFormat: 'pdf',\n    category: 'images',\n    icon: 'file-pdf',\n    iconColor: 'text-red-500',\n    path: '/png-to-pdf',\n  },\n  {\n    id: 'svg-to-png',\n    name: 'SVG to PNG',\n    description: 'Convert vector SVG to raster PNG',\n    fromFormat: 'svg',\n    toFormat: 'png',\n    category: 'images',\n    icon: 'vector-square',\n    iconColor: 'text-orange-500',\n    path: '/svg-to-png',\n  },\n  {\n    id: 'heic-to-jpg',\n    name: 'HEIC to JPG',\n    description: 'Convert iPhone HEIC photos to JPEG',\n    fromFormat: 'heic',\n    toFormat: 'jpg',\n    category: 'images',\n    icon: 'smartphone',\n    iconColor: 'text-gray-500',\n    path: '/heic-to-jpg',\n  },\n  {\n    id: 'gif-to-mp4',\n    name: 'GIF to MP4',\n    description: 'Convert animated GIF to MP4 video',\n    fromFormat: 'gif',\n    toFormat: 'mp4',\n    category: 'images',\n    icon: 'film',\n    iconColor: 'text-pink-500',\n    path: '/gif-to-mp4',\n  },\n  {\n    id: 'image-compressor',\n    name: 'Compress Image',\n    description: 'Reduce image file size',\n    fromFormat: 'any',\n    toFormat: 'compressed',\n    category: 'images',\n    icon: 'compress',\n    iconColor: 'text-indigo-500',\n    path: '/image-compressor',\n  },\n\n  // Audio\n  {\n    id: 'mp3-to-wav',\n    name: 'MP3 to WAV',\n    description: 'Convert MP3 audio to WAV format',\n    fromFormat: 'mp3',\n    toFormat: 'wav',\n    category: 'audio',\n    icon: 'volume-2',\n    iconColor: 'text-blue-500',\n    path: '/mp3-to-wav',\n    popular: true,\n  },\n  {\n    id: 'wav-to-mp3',\n    name: 'WAV to MP3',\n    description: 'Convert WAV audio to MP3 format',\n    fromFormat: 'wav',\n    toFormat: 'mp3',\n    category: 'audio',\n    icon: 'music',\n    iconColor: 'text-purple-500',\n    path: '/wav-to-mp3',\n  },\n  {\n    id: 'flac-to-mp3',\n    name: 'FLAC to MP3',\n    description: 'Convert FLAC audio to MP3 format',\n    fromFormat: 'flac',\n    toFormat: 'mp3',\n    category: 'audio',\n    icon: 'headphones',\n    iconColor: 'text-green-500',\n    path: '/flac-to-mp3',\n  },\n  {\n    id: 'm4a-to-mp3',\n    name: 'M4A to MP3',\n    description: 'Convert M4A audio to MP3 format',\n    fromFormat: 'm4a',\n    toFormat: 'mp3',\n    category: 'audio',\n    icon: 'music',\n    iconColor: 'text-orange-500',\n    path: '/m4a-to-mp3',\n  },\n  {\n    id: 'ogg-to-mp3',\n    name: 'OGG to MP3',\n    description: 'Convert OGG audio to MP3 format',\n    fromFormat: 'ogg',\n    toFormat: 'mp3',\n    category: 'audio',\n    icon: 'volume-2',\n    iconColor: 'text-red-500',\n    path: '/ogg-to-mp3',\n  },\n  {\n    id: 'mp3-to-aac',\n    name: 'MP3 to AAC',\n    description: 'Convert MP3 to AAC audio format',\n    fromFormat: 'mp3',\n    toFormat: 'aac',\n    category: 'audio',\n    icon: 'radio',\n    iconColor: 'text-indigo-500',\n    path: '/mp3-to-aac',\n  },\n  {\n    id: 'audio-to-text',\n    name: 'Audio to Text',\n    description: 'Transcribe audio to text using speech recognition',\n    fromFormat: 'audio',\n    toFormat: 'text',\n    category: 'other',\n    icon: 'mic',\n    iconColor: 'text-teal-500',\n    path: '/audio-to-text',\n  },\n  {\n    id: 'text-to-speech',\n    name: 'Text to Speech',\n    description: 'Convert text to audio speech',\n    fromFormat: 'text',\n    toFormat: 'audio',\n    category: 'other',\n    icon: 'message-circle',\n    iconColor: 'text-pink-500',\n    path: '/text-to-speech',\n  },\n\n  // Video\n  {\n    id: 'mp4-to-avi',\n    name: 'MP4 to AVI',\n    description: 'Convert MP4 videos to AVI format',\n    fromFormat: 'mp4',\n    toFormat: 'avi',\n    category: 'video',\n    icon: 'video',\n    iconColor: 'text-blue-500',\n    path: '/mp4-to-avi',\n    popular: true,\n  },\n  {\n    id: 'avi-to-mp4',\n    name: 'AVI to MP4',\n    description: 'Convert AVI videos to MP4 format',\n    fromFormat: 'avi',\n    toFormat: 'mp4',\n    category: 'video',\n    icon: 'film',\n    iconColor: 'text-purple-500',\n    path: '/avi-to-mp4',\n  },\n  {\n    id: 'mp4-to-mov',\n    name: 'MP4 to MOV',\n    description: 'Convert MP4 to QuickTime MOV format',\n    fromFormat: 'mp4',\n    toFormat: 'mov',\n    category: 'video',\n    icon: 'video',\n    iconColor: 'text-green-500',\n    path: '/mp4-to-mov',\n  },\n  {\n    id: 'mp4-to-mkv',\n    name: 'MP4 to MKV',\n    description: 'Convert MP4 to Matroska MKV format',\n    fromFormat: 'mp4',\n    toFormat: 'mkv',\n    category: 'video',\n    icon: 'play',\n    iconColor: 'text-orange-500',\n    path: '/mp4-to-mkv',\n  },\n  {\n    id: 'mp4-to-webm',\n    name: 'MP4 to WEBM',\n    description: 'Convert MP4 to web-optimized WEBM',\n    fromFormat: 'mp4',\n    toFormat: 'webm',\n    category: 'video',\n    icon: 'globe',\n    iconColor: 'text-red-500',\n    path: '/mp4-to-webm',\n  },\n  {\n    id: 'extract-mp3-from-mp4',\n    name: 'Extract Audio',\n    description: 'Extract MP3 audio from MP4 video',\n    fromFormat: 'mp4',\n    toFormat: 'mp3',\n    category: 'video',\n    icon: 'music',\n    iconColor: 'text-indigo-500',\n    path: '/extract-mp3-from-mp4',\n  },\n  {\n    id: 'compress-mp4',\n    name: 'Compress Video',\n    description: 'Reduce MP4 video file size',\n    fromFormat: 'mp4',\n    toFormat: 'compressed',\n    category: 'video',\n    icon: 'minimize-2',\n    iconColor: 'text-teal-500',\n    path: '/compress-mp4',\n  },\n\n  // Archives\n  {\n    id: 'zip-to-rar',\n    name: 'ZIP to RAR',\n    description: 'Convert ZIP archives to RAR format',\n    fromFormat: 'zip',\n    toFormat: 'rar',\n    category: 'archives',\n    icon: 'archive',\n    iconColor: 'text-blue-500',\n    path: '/zip-to-rar',\n  },\n  {\n    id: 'rar-to-zip',\n    name: 'RAR to ZIP',\n    description: 'Convert RAR archives to ZIP format',\n    fromFormat: 'rar',\n    toFormat: 'zip',\n    category: 'archives',\n    icon: 'archive',\n    iconColor: 'text-purple-500',\n    path: '/rar-to-zip',\n  },\n  {\n    id: 'zip-to-7z',\n    name: 'ZIP to 7Z',\n    description: 'Convert ZIP to 7-Zip format',\n    fromFormat: 'zip',\n    toFormat: '7z',\n    category: 'archives',\n    icon: 'archive',\n    iconColor: 'text-green-500',\n    path: '/zip-to-7z',\n  },\n  {\n    id: 'tar-to-zip',\n    name: 'TAR to ZIP',\n    description: 'Convert TAR archives to ZIP format',\n    fromFormat: 'tar',\n    toFormat: 'zip',\n    category: 'archives',\n    icon: 'folder',\n    iconColor: 'text-orange-500',\n    path: '/tar-to-zip',\n  },\n  {\n    id: 'iso-to-zip',\n    name: 'ISO to ZIP',\n    description: 'Extract ISO disk images to ZIP',\n    fromFormat: 'iso',\n    toFormat: 'zip',\n    category: 'archives',\n    icon: 'disc',\n    iconColor: 'text-red-500',\n    path: '/iso-to-zip',\n  },\n  {\n    id: 'file-compressor',\n    name: 'Compress Files',\n    description: 'Create compressed archive from files',\n    fromFormat: 'files',\n    toFormat: 'zip',\n    category: 'archives',\n    icon: 'minimize',\n    iconColor: 'text-indigo-500',\n    path: '/file-compressor',\n  },\n\n  // Other Tools\n  {\n    id: 'image-to-text',\n    name: 'Image to Text (OCR)',\n    description: 'Extract text from images using OCR',\n    fromFormat: 'image',\n    toFormat: 'text',\n    category: 'other',\n    icon: 'eye',\n    iconColor: 'text-blue-500',\n    path: '/image-to-text',\n  },\n  {\n    id: 'speech-to-text',\n    name: 'Speech to Text',\n    description: 'Transcribe speech audio to text',\n    fromFormat: 'audio',\n    toFormat: 'text',\n    category: 'other',\n    icon: 'mic',\n    iconColor: 'text-purple-500',\n    path: '/speech-to-text',\n  },\n  {\n    id: 'epub-to-pdf',\n    name: 'EPUB to PDF',\n    description: 'Convert EPUB ebooks to PDF format',\n    fromFormat: 'epub',\n    toFormat: 'pdf',\n    category: 'other',\n    icon: 'book',\n    iconColor: 'text-green-500',\n    path: '/epub-to-pdf',\n  },\n  {\n    id: 'mobi-to-pdf',\n    name: 'MOBI to PDF',\n    description: 'Convert MOBI ebooks to PDF format',\n    fromFormat: 'mobi',\n    toFormat: 'pdf',\n    category: 'other',\n    icon: 'book-open',\n    iconColor: 'text-orange-500',\n    path: '/mobi-to-pdf',\n  },\n];\n\nexport const getToolsByCategory = (category: ConversionCategory): ConversionTool[] => {\n  return conversionTools.filter(tool => tool.category === category);\n};\n\nexport const getPopularTools = (): ConversionTool[] => {\n  return conversionTools.filter(tool => tool.popular);\n};\n\nexport const getToolById = (id: string): ConversionTool | undefined => {\n  return conversionTools.find(tool => tool.id === id);\n};\n\nexport const getToolByPath = (path: string): ConversionTool | undefined => {\n  return conversionTools.find(tool => tool.path === path);\n};\n\nexport const categories: { id: ConversionCategory; name: string; icon: string }[] = [\n  { id: 'documents', name: 'Documents', icon: 'file-text' },\n  { id: 'images', name: 'Images', icon: 'image' },\n  { id: 'audio', name: 'Audio', icon: 'volume-2' },\n  { id: 'video', name: 'Video', icon: 'video' },\n  { id: 'archives', name: 'Archives', icon: 'archive' },\n  { id: 'other', name: 'Other Tools', icon: 'settings' },\n];\n","size_bytes":12030},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function getFileExtension(filename: string): string {\n  return filename.slice(((filename.lastIndexOf('.') - 1) >>> 0) + 2);\n}\n\nexport function getFileNameWithoutExtension(filename: string): string {\n  return filename.replace(/\\.[^/.]+$/, '');\n}\n\nexport function isValidFileType(file: File, acceptedTypes: string[]): boolean {\n  if (acceptedTypes.length === 0) return true;\n  \n  const fileExtension = getFileExtension(file.name).toLowerCase();\n  return acceptedTypes.some(type => \n    type.replace('.', '').toLowerCase() === fileExtension\n  );\n}\n\nexport function generateDownloadUrl(conversionId: string): string {\n  return `/api/download/${conversionId}`;\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","size_bytes":1310},"client/src/pages/about.tsx":{"content":"import { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Shield, Zap, Users, Award } from 'lucide-react';\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-about\">\n      <title>About Us - Free Online File Converter</title>\n      <meta name=\"description\" content=\"Learn about our mission to provide free, secure, and fast file conversion services. Trusted by millions of users worldwide.\" />\n      \n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\" data-testid=\"hero-section\">\n            <h1 className=\"text-4xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              About FileConverter\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              We're on a mission to make file conversion simple, secure, and accessible to everyone. \n              No downloads, no subscriptions, no hassle.\n            </p>\n          </div>\n\n          {/* Mission Statement */}\n          <Card className=\"mb-8\" data-testid=\"card-mission\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-mission-title\">Our Mission</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-mission-description\">\n                We believe that file conversion should be free, fast, and secure. Our platform was built to solve \n                the everyday frustrations people face when trying to convert files between different formats. \n                Whether you're a student, professional, or just someone who needs to convert a file occasionally, \n                we've got you covered with our comprehensive suite of conversion tools.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n            <Card data-testid=\"card-feature-security\">\n              <CardContent className=\"p-6 text-center\">\n                <Shield className=\"h-12 w-12 text-primary mx-auto mb-4\" data-testid=\"icon-security\" />\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-security-title\">Security First</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-security-description\">\n                  All files are processed with enterprise-grade security and automatically deleted after conversion.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-speed\">\n              <CardContent className=\"p-6 text-center\">\n                <Zap className=\"h-12 w-12 text-primary mx-auto mb-4\" data-testid=\"icon-speed\" />\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-speed-title\">Lightning Fast</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-speed-description\">\n                  Our optimized servers and algorithms ensure your files are converted in seconds, not minutes.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-users\">\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"h-12 w-12 text-primary mx-auto mb-4\" data-testid=\"icon-users\" />\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-users-title\">Trusted by Millions</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-users-description\">\n                  Over 10 million files converted and counting, with a 99.9% customer satisfaction rate.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-quality\">\n              <CardContent className=\"p-6 text-center\">\n                <Award className=\"h-12 w-12 text-primary mx-auto mb-4\" data-testid=\"icon-quality\" />\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-quality-title\">Premium Quality</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-quality-description\">\n                  Advanced algorithms ensure your converted files maintain the highest quality possible.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Our Story */}\n          <Card className=\"mb-8\" data-testid=\"card-story\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-story-title\">Our Story</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n                <p data-testid=\"text-story-paragraph-1\">\n                  FileConverter was founded in 2020 when our team realized how frustrating it was to find reliable, \n                  free file conversion tools online. Most services were either expensive, required software downloads, \n                  or compromised on security and quality.\n                </p>\n                <p data-testid=\"text-story-paragraph-2\">\n                  We set out to build a better solution - one that would be completely free, work entirely in your \n                  browser, and never compromise on security or quality. After months of development and testing, \n                  we launched with support for the most common file conversions.\n                </p>\n                <p data-testid=\"text-story-paragraph-3\">\n                  Today, we support over 50 different file conversion types and serve millions of users worldwide. \n                  We're constantly adding new features and formats based on user feedback, and we remain committed \n                  to keeping our core service completely free.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Team Section */}\n          <Card className=\"mb-8\" data-testid=\"card-team\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-team-title\">Our Team</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-team-description\">\n                We're a small but dedicated team of developers, designers, and customer support specialists \n                who are passionate about making technology more accessible. Our diverse backgrounds in software \n                engineering, user experience design, and digital security help us build tools that are both \n                powerful and easy to use.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Contact CTA */}\n          <Card data-testid=\"card-contact-cta\">\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-xl font-semibold mb-4\" data-testid=\"text-contact-title\">\n                Questions or Feedback?\n              </h2>\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"text-contact-description\">\n                We'd love to hear from you. Whether you have suggestions for new features, \n                need help with a conversion, or just want to say hello.\n              </p>\n              <a \n                href=\"/contact\"\n                className=\"inline-flex items-center justify-center rounded-md text-sm font-medium bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2\"\n                data-testid=\"link-contact\"\n              >\n                Get in Touch\n              </a>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8023},"client/src/pages/contact.tsx":{"content":"import { useState } from 'react';\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Mail, MessageSquare, Phone, MapPin, Send } from 'lucide-react';\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    category: '',\n    message: '',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch('/api/contact', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Message sent successfully!\",\n          description: \"We'll get back to you as soon as possible.\",\n        });\n        setFormData({\n          name: '',\n          email: '',\n          subject: '',\n          category: '',\n          message: '',\n        });\n      } else {\n        throw new Error('Failed to send message');\n      }\n    } catch (error) {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again or use alternative contact methods.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-contact\">\n      <title>Contact Us - Free Online File Converter</title>\n      <meta name=\"description\" content=\"Get in touch with our team for support, feedback, or business inquiries. We're here to help with all your file conversion needs.\" />\n      \n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Hero Section */}\n          <div className=\"text-center mb-12\" data-testid=\"hero-section\">\n            <h1 className=\"text-4xl font-bold mb-6\" data-testid=\"text-hero-title\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              Have questions, feedback, or need help? We'd love to hear from you. \n              Get in touch and we'll respond as soon as possible.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Contact Information */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"space-y-6\">\n                <Card data-testid=\"card-contact-info\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\" data-testid=\"text-contact-info-title\">\n                      <MessageSquare className=\"mr-2 h-5 w-5\" />\n                      Get in Touch\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3\" data-testid=\"contact-email\">\n                      <Mail className=\"h-5 w-5 text-primary\" data-testid=\"icon-email\" />\n                      <div>\n                        <div className=\"font-medium\" data-testid=\"text-email-label\">Email</div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid=\"text-email-value\">\n                          support@fileconverter.com\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3\" data-testid=\"contact-response\">\n                      <Phone className=\"h-5 w-5 text-primary\" data-testid=\"icon-response\" />\n                      <div>\n                        <div className=\"font-medium\" data-testid=\"text-response-label\">Response Time</div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid=\"text-response-value\">\n                          Usually within 24 hours\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-3\" data-testid=\"contact-location\">\n                      <MapPin className=\"h-5 w-5 text-primary\" data-testid=\"icon-location\" />\n                      <div>\n                        <div className=\"font-medium\" data-testid=\"text-location-label\">Location</div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid=\"text-location-value\">\n                          United States\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-faq-link\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"font-semibold mb-2\" data-testid=\"text-faq-title\">\n                      Frequently Asked Questions\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\" data-testid=\"text-faq-description\">\n                      Find answers to common questions about our file conversion services.\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" asChild data-testid=\"button-view-faq\">\n                      <a href=\"/#faq\">View FAQ</a>\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Contact Form */}\n            <div className=\"lg:col-span-2\">\n              <Card data-testid=\"card-contact-form\">\n                <CardHeader>\n                  <CardTitle data-testid=\"text-form-title\">Send us a Message</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-contact\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"name\" data-testid=\"label-name\">Name *</Label>\n                        <Input\n                          id=\"name\"\n                          type=\"text\"\n                          value={formData.name}\n                          onChange={(e) => handleInputChange('name', e.target.value)}\n                          required\n                          data-testid=\"input-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"email\" data-testid=\"label-email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={(e) => handleInputChange('email', e.target.value)}\n                          required\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"category\" data-testid=\"label-category\">Category</Label>\n                        <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n                          <SelectTrigger data-testid=\"select-category\">\n                            <SelectValue placeholder=\"Select a category\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"support\">Technical Support</SelectItem>\n                            <SelectItem value=\"feedback\">Feedback</SelectItem>\n                            <SelectItem value=\"business\">Business Inquiry</SelectItem>\n                            <SelectItem value=\"bug\">Bug Report</SelectItem>\n                            <SelectItem value=\"feature\">Feature Request</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"subject\" data-testid=\"label-subject\">Subject *</Label>\n                        <Input\n                          id=\"subject\"\n                          type=\"text\"\n                          value={formData.subject}\n                          onChange={(e) => handleInputChange('subject', e.target.value)}\n                          required\n                          data-testid=\"input-subject\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"message\" data-testid=\"label-message\">Message *</Label>\n                      <Textarea\n                        id=\"message\"\n                        value={formData.message}\n                        onChange={(e) => handleInputChange('message', e.target.value)}\n                        rows={6}\n                        required\n                        placeholder=\"Please describe your question or issue in detail...\"\n                        data-testid=\"textarea-message\"\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                      disabled={isSubmitting}\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      {isSubmitting ? 'Sending...' : 'Send Message'}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Additional Help Section */}\n          <Card className=\"mt-12\" data-testid=\"card-additional-help\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-center mb-6\" data-testid=\"text-help-title\">\n                Other Ways to Get Help\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n                <div data-testid=\"help-documentation\">\n                  <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <MessageSquare className=\"h-8 w-8 text-primary\" data-testid=\"icon-help-docs\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\" data-testid=\"text-docs-title\">Documentation</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-docs-description\">\n                    Browse our comprehensive guides and tutorials for detailed instructions.\n                  </p>\n                </div>\n\n                <div data-testid=\"help-community\">\n                  <div className=\"bg-accent/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <MessageSquare className=\"h-8 w-8 text-accent\" data-testid=\"icon-help-community\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\" data-testid=\"text-community-title\">Community Forum</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-community-description\">\n                    Connect with other users and get help from our community members.\n                  </p>\n                </div>\n\n                <div data-testid=\"help-status\">\n                  <div className=\"bg-secondary/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <MessageSquare className=\"h-8 w-8 text-secondary-foreground\" data-testid=\"icon-help-status\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\" data-testid=\"text-status-title\">Service Status</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"text-status-description\">\n                    Check our service status page for any ongoing issues or maintenance.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12923},"client/src/pages/converter.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute } from 'wouter';\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { FileUploadZone } from '@/components/converter/file-upload-zone';\nimport { FilePreview } from '@/components/converter/file-preview';\nimport { ConversionProgress } from '@/components/converter/conversion-progress';\nimport { DownloadArea } from '@/components/converter/download-area';\nimport AdBanner from '@/components/common/ad-banner'; // ✅ updated import (default export)\nimport { RecentConversions } from '@/components/common/recent-conversions';\nimport { FeaturesSection } from '@/components/common/features-section';\nimport { FAQSection } from '@/components/common/faq-section';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useFileConverter } from '@/hooks/use-file-converter';\nimport { getToolByPath } from '@/lib/conversion-tools';\nimport { ConversionSettings } from '@/types/converter';\nimport { Sparkles, FileText, Image, Volume2, Video, Archive, Settings } from 'lucide-react';\n\nexport default function Converter() {\n  const [match, params] = useRoute('/:toolPath*');\n  const [conversionSettings, setConversionSettings] = useState<ConversionSettings>({\n    targetFormat: '',\n    quality: 'medium',\n    compress: false,\n    emailResult: false,\n  });\n\n  const {\n    files,\n    isConverting,\n    addFiles,\n    removeFile,\n    convertFiles,\n  } = useFileConverter();\n\n  const tool = getToolByPath(`/${params?.[\"toolPath*\"]}`);\n\n  useEffect(() => {\n    if (tool) {\n      setConversionSettings(prev => ({\n        ...prev,\n        targetFormat: tool.toFormat,\n      }));\n    }\n  }, [tool]);\n\n  if (!tool) {\n    return (\n      <div className=\"min-h-screen bg-background\" data-testid=\"page-converter-not-found\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-8\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <h1 className=\"text-2xl font-bold mb-4\">Tool Not Found</h1>\n              <p className=\"text-muted-foreground\">The conversion tool you're looking for doesn't exist.</p>\n            </CardContent>\n          </Card>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleConvert = () => {\n    convertFiles(conversionSettings);\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'documents': return FileText;\n      case 'images': return Image;\n      case 'audio': return Volume2;\n      case 'video': return Video;\n      case 'archives': return Archive;\n      default: return Settings;\n    }\n  };\n\n  const CategoryIcon = getCategoryIcon(tool.category);\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid={`page-converter-${tool.id}`}>\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 order-2 lg:order-1\">\n            <div className=\"sticky top-32 space-y-6\">\n              {/* ✅ Sidebar Ad - DISABLED: Replace with real slot ID */}\n              {/* <AdBanner\n                slot=\"REPLACE_WITH_REAL_SLOT_ID\"\n                format=\"auto\"\n                className=\"block w-full\"\n                data-testid=\"ad-sidebar\"\n              /> */}\n              <RecentConversions />\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3 order-1 lg:order-2\">\n            {/* Tool Header */}\n            <Card className=\"mb-8\" data-testid=\"card-tool-header\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-primary/10 rounded-lg\">\n                    <CategoryIcon className={`h-8 w-8 ${tool.iconColor}`} data-testid=\"icon-tool-category\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-2xl\" data-testid=\"text-tool-title\">{tool.name} Converter</CardTitle>\n                    <CardDescription data-testid=\"text-tool-description\">{tool.description}</CardDescription>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2 mt-4\">\n                  <Badge variant=\"outline\" data-testid=\"badge-from-format\">\n                    From: {tool.fromFormat.toUpperCase()}\n                  </Badge>\n                  <Badge variant=\"outline\" data-testid=\"badge-to-format\">\n                    To: {tool.toFormat.toUpperCase()}\n                  </Badge>\n                  {tool.popular && (\n                    <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"badge-popular\">Popular</Badge>\n                  )}\n                </div>\n              </CardHeader>\n            </Card>\n\n            {/* Tool Instructions */}\n            <Card className=\"mb-8\" data-testid=\"card-tool-instructions\">\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-lg font-semibold mb-4\" data-testid=\"text-how-to-title\">\n                  How to convert {tool.fromFormat.toUpperCase()} to {tool.toFormat.toUpperCase()}\n                </h2>\n                <ol className=\"list-decimal list-inside space-y-2 text-sm text-muted-foreground\">\n                  <li data-testid=\"text-instruction-1\">Upload your {tool.fromFormat.toUpperCase()} file using the drag & drop area or click \"Choose Files\"</li>\n                  <li data-testid=\"text-instruction-2\">Adjust conversion settings if needed (quality, compression, etc.)</li>\n                  <li data-testid=\"text-instruction-3\">Click \"Convert Files\" and wait for the conversion to complete</li>\n                  <li data-testid=\"text-instruction-4\">Download your converted {tool.toFormat.toUpperCase()} file instantly</li>\n                </ol>\n              </CardContent>\n            </Card>\n\n            {/* File Upload & Preview */}\n            <FileUploadZone onFilesAdded={addFiles} disabled={isConverting} acceptedFileTypes={[`.${tool.fromFormat}`]} />\n            <FilePreview files={files} onRemoveFile={removeFile} />\n\n            {/* Convert Button */}\n            {files.length > 0 && (\n              <div className=\"text-center mb-8\">\n                <Button\n                  className=\"bg-accent text-accent-foreground px-8 py-3 text-lg font-semibold hover:bg-accent/90\"\n                  onClick={handleConvert}\n                  disabled={isConverting}\n                  data-testid=\"button-convert-files\"\n                >\n                  <Sparkles className=\"mr-2 h-5 w-5\" />\n                  Convert to {tool.toFormat.toUpperCase()}\n                </Button>\n              </div>\n            )}\n\n            {/* Progress & Download */}\n            <ConversionProgress files={files} />\n            <DownloadArea files={files} />\n\n            {/* Tool-Specific Content */}\n            <Card className=\"mb-8\" data-testid=\"card-tool-details\">\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-lg font-semibold mb-4\" data-testid=\"text-about-tool\">About {tool.name} Conversion</h2>\n                <div className=\"prose text-sm text-muted-foreground max-w-none\">\n                  <p data-testid=\"text-tool-detail-1\">Our {tool.name.toLowerCase()} converter provides fast, secure, and high-quality file conversion from {tool.fromFormat.toUpperCase()} to {tool.toFormat.toUpperCase()} format.</p>\n                  <p data-testid=\"text-tool-detail-2\">The conversion process is performed entirely in your browser or on our secure servers, ensuring your files remain private and are automatically deleted after conversion.</p>\n                  <p data-testid=\"text-tool-detail-3\">No software installation required - simply upload your files and download the converted results in seconds.</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Features Section */}\n            <FeaturesSection />\n\n            {/* ✅ Middle Ad Banner - DISABLED: Replace with real slot ID */}\n            {/* <div className=\"my-8\">\n              <AdBanner\n                slot=\"REPLACE_WITH_REAL_SLOT_ID\"\n                format=\"auto\"\n                className=\"block w-full\"\n                data-testid=\"ad-content\"\n              />\n            </div> */}\n\n            {/* FAQ Section */}\n            <FAQSection />\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8621},"client/src/pages/home.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue \n} from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { CategoryTabs } from '@/components/converter/category-tabs';\nimport { ToolGrid } from '@/components/converter/tool-grid';\nimport { FileUploadZone } from '@/components/converter/file-upload-zone';\nimport { FilePreview } from '@/components/converter/file-preview';\nimport { ConversionProgress } from '@/components/converter/conversion-progress';\nimport { DownloadArea } from '@/components/converter/download-area';\nimport AdBanner from '@/components/common/ad-banner';  // ✅ updated import (default export)\nimport { RecentConversions } from '@/components/common/recent-conversions';\nimport { FeaturesSection } from '@/components/common/features-section';\nimport { FAQSection } from '@/components/common/faq-section';\nimport { getToolsByCategory } from '@/lib/conversion-tools';\nimport { useFileConverter } from '@/hooks/use-file-converter';\nimport { ConversionCategory, ConversionSettings } from '@/types/converter';\nimport { Sparkles } from 'lucide-react';\n\nexport default function Home() {\n  const [activeCategory, setActiveCategory] = useState<ConversionCategory>('documents');\n  const [conversionSettings, setConversionSettings] = useState<ConversionSettings>({\n    targetFormat: '',\n    quality: 'medium',\n    compress: false,\n    emailResult: false,\n  });\n\n  const {\n    files,\n    isConverting,\n    addFiles,\n    removeFile,\n    convertFiles,\n    resetConverter,\n  } = useFileConverter();\n\n  const handleConvert = () => {\n    if (!conversionSettings.targetFormat) {\n      alert('Please select a target format');\n      return;\n    }\n    convertFiles(conversionSettings);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-home\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 order-2 lg:order-1\">\n            <div className=\"sticky top-32 space-y-6\">\n              {/* ✅ Sidebar AdSense block - DISABLED: Replace with real slot ID */}\n              {/* <AdBanner\n                slot=\"REPLACE_WITH_REAL_SLOT_ID\"\n                format=\"auto\"\n                className=\"block w-full\"\n                data-testid=\"ad-sidebar\"\n              /> */}\n              <RecentConversions />\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3 order-1 lg:order-2\">\n            {/* Hero Section */}\n            <div className=\"text-center mb-12\" data-testid=\"hero-section\">\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\" data-testid=\"text-hero-title\">\n                Free Online File Converter\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n                Convert PDF, Images, Audio, Video, Documents (50+ Tools). Fast, secure, and completely free. No registration required.\n              </p>\n            </div>\n\n            {/* Category Tabs */}\n            <CategoryTabs \n              activeCategory={activeCategory}\n              onCategoryChange={setActiveCategory}\n            />\n\n            {/* Tool Grid */}\n            <ToolGrid tools={getToolsByCategory(activeCategory)} />\n\n            {/* File Upload Area */}\n            <FileUploadZone \n              onFilesAdded={addFiles}\n              disabled={isConverting}\n            />\n\n            {/* File Preview */}\n            <FilePreview \n              files={files}\n              onRemoveFile={removeFile}\n            />\n\n            {/* Conversion Settings */}\n            {files.length > 0 && (\n              <Card className=\"mb-6\" data-testid=\"card-conversion-settings\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h4 className=\"font-medium\" data-testid=\"text-conversion-settings\">Conversion Settings</h4>\n                    <Button variant=\"link\" className=\"text-sm\" data-testid=\"button-advanced-options\">\n                      Advanced Options\n                    </Button>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\" data-testid=\"label-convert-to\">\n                        Convert to:\n                      </Label>\n                      <Select \n                        value={conversionSettings.targetFormat}\n                        onValueChange={(value) => \n                          setConversionSettings(prev => ({ ...prev, targetFormat: value }))\n                        }\n                      >\n                        <SelectTrigger className=\"w-full\" data-testid=\"select-target-format\">\n                          <SelectValue placeholder=\"Select format...\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pdf\">PDF</SelectItem>\n                          <SelectItem value=\"docx\">Word (DOCX)</SelectItem>\n                          <SelectItem value=\"png\">PNG</SelectItem>\n                          <SelectItem value=\"jpg\">JPG</SelectItem>\n                          <SelectItem value=\"mp3\">MP3</SelectItem>\n                          <SelectItem value=\"mp4\">MP4</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\" data-testid=\"label-quality\">\n                        Quality:\n                      </Label>\n                      <Select \n                        value={conversionSettings.quality}\n                        onValueChange={(value: 'low' | 'medium' | 'high') => \n                          setConversionSettings(prev => ({ ...prev, quality: value }))\n                        }\n                      >\n                        <SelectTrigger className=\"w-full\" data-testid=\"select-quality\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"block text-sm font-medium mb-2\" data-testid=\"label-options\">\n                        Options:\n                      </Label>\n                      <div className=\"flex items-center space-x-4 mt-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox \n                            id=\"compress\"\n                            checked={conversionSettings.compress}\n                            onCheckedChange={(checked) => \n                              setConversionSettings(prev => ({ ...prev, compress: !!checked }))\n                            }\n                            data-testid=\"checkbox-compress\"\n                          />\n                          <Label htmlFor=\"compress\" className=\"text-sm\">Compress</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox \n                            id=\"email\"\n                            checked={conversionSettings.emailResult}\n                            onCheckedChange={(checked) => \n                              setConversionSettings(prev => ({ ...prev, emailResult: !!checked }))\n                            }\n                            data-testid=\"checkbox-email\"\n                          />\n                          <Label htmlFor=\"email\" className=\"text-sm\">Email result</Label>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Convert Button */}\n            {files.length > 0 && (\n              <div className=\"text-center mb-8\">\n                <Button \n                  className=\"bg-accent text-accent-foreground px-8 py-3 text-lg font-semibold hover:bg-accent/90\"\n                  onClick={handleConvert}\n                  disabled={isConverting || !conversionSettings.targetFormat}\n                  data-testid=\"button-convert-files\"\n                >\n                  <Sparkles className=\"mr-2 h-5 w-5\" />\n                  Convert Files\n                </Button>\n              </div>\n            )}\n\n            {/* Progress Area */}\n            <ConversionProgress files={files} />\n\n            {/* Download Area */}\n            <DownloadArea files={files} />\n\n            {/* Features Section */}\n            <FeaturesSection />\n\n            {/* ✅ Middle AdSense block - DISABLED: Replace with real slot ID */}\n            <div className=\"my-8\">\n              {/* <AdBanner\n                slot=\"REPLACE_WITH_REAL_SLOT_ID\"\n                format=\"auto\"\n                className=\"block w-full\"\n                data-testid=\"ad-content\"\n              /> */}\n            </div>\n\n            {/* FAQ Section */}\n            <FAQSection />\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9961},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy-policy.tsx":{"content":"import { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-privacy-policy\">\n      <title>Privacy Policy - Free Online File Converter</title>\n      <meta name=\"description\" content=\"Our privacy policy explains how we collect, use, and protect your data when using our file conversion services.\" />\n      \n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card data-testid=\"card-privacy-policy\">\n            <CardHeader>\n              <CardTitle className=\"text-3xl\" data-testid=\"text-privacy-title\">Privacy Policy</CardTitle>\n              <p className=\"text-muted-foreground\" data-testid=\"text-privacy-updated\">\n                Last updated: December 2024\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <section data-testid=\"section-introduction\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-intro-title\">Introduction</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-intro-content\">\n                  FileConverter (\"we,\" \"our,\" or \"us\") is committed to protecting your privacy. This Privacy Policy \n                  explains how we collect, use, disclose, and safeguard your information when you use our file \n                  conversion services.\n                </p>\n              </section>\n\n              <section data-testid=\"section-information-collection\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-collection-title\">Information We Collect</h2>\n                <div className=\"space-y-3\">\n                  <div data-testid=\"subsection-files\">\n                    <h3 className=\"text-lg font-medium mb-2\" data-testid=\"text-files-title\">Files You Upload</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-files-content\">\n                      When you use our conversion services, we temporarily store your files on our secure servers \n                      for the sole purpose of performing the conversion. All files are automatically deleted within \n                      24 hours of upload.\n                    </p>\n                  </div>\n                  <div data-testid=\"subsection-usage-data\">\n                    <h3 className=\"text-lg font-medium mb-2\" data-testid=\"text-usage-title\">Usage Data</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-usage-content\">\n                      We collect anonymous usage statistics such as the types of conversions performed, \n                      file sizes, and general location data (country level) to improve our services.\n                    </p>\n                  </div>\n                  <div data-testid=\"subsection-technical-data\">\n                    <h3 className=\"text-lg font-medium mb-2\" data-testid=\"text-technical-title\">Technical Data</h3>\n                    <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-technical-content\">\n                      We automatically collect certain technical information including IP addresses, browser types, \n                      device information, and access times for security and analytical purposes.\n                    </p>\n                  </div>\n                </div>\n              </section>\n\n              <section data-testid=\"section-how-we-use\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-use-title\">How We Use Your Information</h2>\n                <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\" data-testid=\"list-how-we-use\">\n                  <li data-testid=\"text-use-conversion\">To provide file conversion services</li>\n                  <li data-testid=\"text-use-improve\">To improve and optimize our platform</li>\n                  <li data-testid=\"text-use-security\">To ensure security and prevent abuse</li>\n                  <li data-testid=\"text-use-analytics\">To analyze usage patterns and performance</li>\n                  <li data-testid=\"text-use-support\">To provide customer support</li>\n                </ul>\n              </section>\n\n              <section data-testid=\"section-data-security\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-security-title\">Data Security</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-security-content\">\n                  We implement appropriate technical and organizational security measures to protect your information \n                  against unauthorized access, alteration, disclosure, or destruction. All data transmission is \n                  encrypted using SSL/TLS protocols.\n                </p>\n              </section>\n\n              <section data-testid=\"section-file-deletion\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-deletion-title\">File Deletion</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-deletion-content\">\n                  Your uploaded files and converted results are automatically deleted from our servers within 24 hours. \n                  We do not permanently store any of your files or their contents.\n                </p>\n              </section>\n\n              <section data-testid=\"section-cookies\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-cookies-title\">Cookies and Tracking</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-cookies-content\">\n                  We use essential cookies to ensure proper functionality of our services. We also use analytics \n                  cookies (Google Analytics) to understand how our services are used. You can disable cookies in \n                  your browser settings, though this may affect functionality.\n                </p>\n              </section>\n\n              <section data-testid=\"section-third-parties\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-third-parties-title\">Third-Party Services</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-third-parties-content\">\n                  We use Google Analytics for usage analytics and Google AdSense for advertising. These services \n                  have their own privacy policies and may collect additional information.\n                </p>\n              </section>\n\n              <section data-testid=\"section-your-rights\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-rights-title\">Your Rights</h2>\n                <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\" data-testid=\"list-your-rights\">\n                  <li data-testid=\"text-right-access\">Right to access your personal data</li>\n                  <li data-testid=\"text-right-rectification\">Right to rectify inaccurate data</li>\n                  <li data-testid=\"text-right-erasure\">Right to request data deletion</li>\n                  <li data-testid=\"text-right-portability\">Right to data portability</li>\n                  <li data-testid=\"text-right-object\">Right to object to processing</li>\n                </ul>\n              </section>\n\n              <section data-testid=\"section-changes\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-changes-title\">Changes to This Policy</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-changes-content\">\n                  We may update this Privacy Policy from time to time. We will notify you of any changes by posting \n                  the new Privacy Policy on this page and updating the \"Last updated\" date.\n                </p>\n              </section>\n\n              <section data-testid=\"section-contact\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-contact-title\">Contact Us</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-contact-content\">\n                  If you have any questions about this Privacy Policy or our privacy practices, please contact us \n                  through our contact page or email us at privacy@fileconverter.com.\n                </p>\n              </section>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8859},"client/src/pages/terms-of-service.tsx":{"content":"import { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function TermsOfService() {\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"page-terms-of-service\">\n      <title>Terms of Service - Free Online File Converter</title>\n      <meta name=\"description\" content=\"Terms of service for using our free online file conversion platform. Please read these terms carefully before using our services.\" />\n      \n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card data-testid=\"card-terms-of-service\">\n            <CardHeader>\n              <CardTitle className=\"text-3xl\" data-testid=\"text-terms-title\">Terms of Service</CardTitle>\n              <p className=\"text-muted-foreground\" data-testid=\"text-terms-updated\">\n                Last updated: December 2024\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <section data-testid=\"section-acceptance\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-acceptance-title\">Acceptance of Terms</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-acceptance-content\">\n                  By accessing and using FileConverter, you accept and agree to be bound by the terms and provision \n                  of this agreement. If you do not agree to abide by the above, please do not use this service.\n                </p>\n              </section>\n\n              <section data-testid=\"section-description\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-description-title\">Description of Service</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-description-content\">\n                  FileConverter provides free online file conversion services. We offer conversion between various \n                  file formats including documents, images, audio, video, and archive files. The service is provided \n                  \"as is\" without any warranties.\n                </p>\n              </section>\n\n              <section data-testid=\"section-acceptable-use\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-use-title\">Acceptable Use</h2>\n                <div className=\"space-y-3\">\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-use-intro\">\n                    You agree to use FileConverter only for lawful purposes and in accordance with these Terms. \n                    You agree not to use the service:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\" data-testid=\"list-prohibited-uses\">\n                    <li data-testid=\"text-prohibited-illegal\">For any unlawful purpose or to solicit others to perform illegal acts</li>\n                    <li data-testid=\"text-prohibited-harmful\">To upload files containing viruses, malware, or other harmful code</li>\n                    <li data-testid=\"text-prohibited-copyright\">To violate any international, federal, provincial, or state regulations or laws</li>\n                    <li data-testid=\"text-prohibited-abuse\">To abuse, harass, threaten, impersonate, or intimidate others</li>\n                    <li data-testid=\"text-prohibited-spam\">To submit false or misleading information</li>\n                    <li data-testid=\"text-prohibited-overload\">To attempt to overload or crash our servers</li>\n                  </ul>\n                </div>\n              </section>\n\n              <section data-testid=\"section-file-content\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-content-title\">File Content Responsibility</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-content-content\">\n                  You are solely responsible for the content of files you upload to our service. You warrant that \n                  you own or have the necessary rights to use any files you submit for conversion. We do not review, \n                  monitor, or examine the content of files uploaded to our service.\n                </p>\n              </section>\n\n              <section data-testid=\"section-file-deletion\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-deletion-title\">Automatic File Deletion</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-deletion-content\">\n                  All uploaded files and conversion results are automatically deleted from our servers within 24 hours. \n                  We recommend downloading your converted files promptly. We are not responsible for any data loss \n                  that may occur.\n                </p>\n              </section>\n\n              <section data-testid=\"section-limitations\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-limitations-title\">Service Limitations</h2>\n                <div className=\"space-y-3\">\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-limitations-intro\">\n                    Our service has the following limitations:\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\" data-testid=\"list-limitations\">\n                    <li data-testid=\"text-limit-size\">Maximum file size of 100MB per file for free users</li>\n                    <li data-testid=\"text-limit-concurrent\">Limited number of concurrent conversions</li>\n                    <li data-testid=\"text-limit-formats\">Support for specific file formats only</li>\n                    <li data-testid=\"text-limit-availability\">Service availability is not guaranteed 24/7</li>\n                  </ul>\n                </div>\n              </section>\n\n              <section data-testid=\"section-intellectual-property\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-ip-title\">Intellectual Property</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-ip-content\">\n                  The FileConverter service, including its original content, features, and functionality, is owned \n                  by FileConverter and is protected by international copyright, trademark, patent, trade secret, \n                  and other intellectual property laws.\n                </p>\n              </section>\n\n              <section data-testid=\"section-disclaimer\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-disclaimer-title\">Disclaimer of Warranties</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-disclaimer-content\">\n                  The information on this service is provided on an \"as is\" basis. To the fullest extent permitted \n                  by law, FileConverter excludes all representations, warranties, conditions, and terms whether \n                  express, implied, statutory, or otherwise.\n                </p>\n              </section>\n\n              <section data-testid=\"section-limitation-liability\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-liability-title\">Limitation of Liability</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-liability-content\">\n                  FileConverter shall not be liable for any indirect, incidental, special, consequential, or punitive \n                  damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, \n                  resulting from your use of the service.\n                </p>\n              </section>\n\n              <section data-testid=\"section-termination\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-termination-title\">Termination</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-termination-content\">\n                  We may terminate or suspend your access to our service immediately, without prior notice or liability, \n                  for any reason whatsoever, including without limitation if you breach the Terms.\n                </p>\n              </section>\n\n              <section data-testid=\"section-governing-law\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-law-title\">Governing Law</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-law-content\">\n                  These Terms shall be interpreted and governed by the laws of the United States, without regard to \n                  its conflict of law provisions. Our failure to enforce any right or provision of these Terms will \n                  not be considered a waiver of those rights.\n                </p>\n              </section>\n\n              <section data-testid=\"section-changes\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-changes-title\">Changes to Terms</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-changes-content\">\n                  We reserve the right, at our sole discretion, to modify or replace these Terms at any time. \n                  If a revision is material, we will try to provide at least 30 days notice prior to any new terms taking effect.\n                </p>\n              </section>\n\n              <section data-testid=\"section-contact-terms\">\n                <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-section-contact-terms-title\">Contact Information</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-section-contact-terms-content\">\n                  If you have any questions about these Terms of Service, please contact us through our contact page \n                  or email us at legal@fileconverter.com.\n                </p>\n              </section>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10474},"client/src/types/converter.ts":{"content":"export interface ConversionTool {\n  id: string;\n  name: string;\n  description: string;\n  fromFormat: string;\n  toFormat: string;\n  category: ConversionCategory;\n  icon: string;\n  iconColor: string;\n  path: string;\n  popular?: boolean;\n}\n\nexport type ConversionCategory = 'documents' | 'images' | 'audio' | 'video' | 'archives' | 'other';\n\nexport interface FileUpload {\n  id: string;\n  file: File;\n  preview?: string;\n  status: 'pending' | 'uploading' | 'uploaded' | 'processing' | 'completed' | 'failed';\n  progress: number;\n  error?: string;\n  downloadUrl?: string;\n  convertedFileName?: string;\n  conversionId?: string;\n}\n\nexport interface ConversionSettings {\n  targetFormat: string;\n  quality: 'low' | 'medium' | 'high';\n  compress: boolean;\n  emailResult: boolean;\n  customSettings?: Record<string, any>;\n}\n\nexport interface ConversionHistory {\n  id: string;\n  originalName: string;\n  convertedName: string;\n  fromFormat: string;\n  toFormat: string;\n  timestamp: Date;\n  status: 'completed' | 'failed';\n}\n","size_bytes":1010},"client/src/components/common/ad-banner.tsx":{"content":"import { useEffect } from \"react\";\n\ninterface AdBannerProps {\n  slot: string;              // AdSense slot ID (from your AdSense dashboard)\n  format?: string;           // Format type (e.g. \"auto\", \"rectangle\", etc.)\n  className?: string;        // Extra Tailwind / CSS classes\n}\n\nexport default function AdBanner({\n  slot,\n  format = \"auto\",\n  className = \"\",\n}: AdBannerProps) {\n  useEffect(() => {\n    try {\n      // Load the AdSense ad\n      // @ts-ignore\n      (window.adsbygoogle = window.adsbygoogle || []).push({});\n    } catch (err) {\n      console.error(\"AdSense error:\", err);\n    }\n  }, []);\n\n  return (\n    <div className={`ad-container my-4 flex justify-center ${className}`}>\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: \"block\" }}\n        data-ad-client=\"ca-pub-7283553771090751\"   // ✅ your publisher ID\n        data-ad-slot={slot}                        // ✅ ad slot ID\n        data-ad-format={format}\n        data-full-width-responsive=\"true\"\n      ></ins>\n    </div>\n  );\n}\n","size_bytes":1022},"client/src/components/common/faq-section.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\ninterface FAQItem {\n  id: string;\n  question: string;\n  answer: string;\n}\n\nconst faqItems: FAQItem[] = [\n  {\n    id: '1',\n    question: 'Is the file conversion really free?',\n    answer: 'Yes! Our basic conversion service is completely free. We support this through non-intrusive advertisements. Premium features like batch processing and cloud storage integration require a subscription.',\n  },\n  {\n    id: '2',\n    question: 'What file formats do you support?',\n    answer: 'We support over 50 file formats including PDF, Word, Excel, PowerPoint, JPG, PNG, MP3, MP4, ZIP, and many more. Check our conversion tools above for the complete list.',\n  },\n  {\n    id: '3',\n    question: 'How secure are my files?',\n    answer: 'Your files are processed on secure servers with SSL encryption. All files are automatically deleted within 24 hours of upload, and we never access or store your personal data.',\n  },\n  {\n    id: '4',\n    question: 'What is the maximum file size?',\n    answer: 'Free users can upload files up to 100MB per file. Premium subscribers can convert files up to 1GB in size.',\n  },\n];\n\nexport function FAQSection() {\n  const [openItems, setOpenItems] = useState<string[]>([]);\n\n  const toggleItem = (id: string) => {\n    setOpenItems((prev) =>\n      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]\n    );\n  };\n\n  return (\n    <Card data-testid=\"card-faq\">\n      <CardContent className=\"p-8\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\" data-testid=\"text-faq-title\">\n          Frequently Asked Questions\n        </h2>\n        <div className=\"space-y-4\">\n          {faqItems.map((item) => (\n            <div key={item.id} className=\"border-b border-border pb-4\" data-testid={`faq-item-${item.id}`}>\n              <button \n                className=\"flex items-center justify-between w-full text-left font-medium py-2\"\n                onClick={() => toggleItem(item.id)}\n                data-testid={`button-faq-${item.id}`}\n              >\n                <span data-testid={`text-faq-question-${item.id}`}>{item.question}</span>\n                {openItems.includes(item.id) ? (\n                  <ChevronUp className=\"h-4 w-4\" data-testid={`icon-chevron-up-${item.id}`} />\n                ) : (\n                  <ChevronDown className=\"h-4 w-4\" data-testid={`icon-chevron-down-${item.id}`} />\n                )}\n              </button>\n              {openItems.includes(item.id) && (\n                <div className=\"mt-2 text-sm text-muted-foreground\" data-testid={`text-faq-answer-${item.id}`}>\n                  {item.answer}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2860},"client/src/components/common/features-section.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Lock, Zap, Smartphone } from 'lucide-react';\n\nexport function FeaturesSection() {\n  const features = [\n    {\n      icon: Lock,\n      title: '100% Secure',\n      description: 'Your files are automatically deleted after conversion. We never store or share your data.',\n    },\n    {\n      icon: Zap,\n      title: 'Lightning Fast',\n      description: 'Our optimized servers process your files in seconds, not minutes.',\n    },\n    {\n      icon: Smartphone,\n      title: 'Works Anywhere',\n      description: 'Convert files on any device - desktop, tablet, or smartphone.',\n    },\n  ];\n\n  return (\n    <Card data-testid=\"card-features\">\n      <CardContent className=\"p-8\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\" data-testid=\"text-features-title\">\n          Why Choose Our File Converter?\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"text-center\" data-testid={`feature-${index}`}>\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <feature.icon className=\"h-8 w-8 text-primary\" data-testid={`icon-feature-${index}`} />\n              </div>\n              <h3 className=\"font-semibold mb-2\" data-testid={`text-feature-title-${index}`}>\n                {feature.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-feature-description-${index}`}>\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1722},"client/src/components/common/recent-conversions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Clock, Check } from 'lucide-react';\n\ninterface RecentConversion {\n  id: string;\n  fileName: string;\n  fromFormat: string;\n  toFormat: string;\n  status: 'completed' | 'processing';\n}\n\n// Mock data for demonstration\nconst mockConversions: RecentConversion[] = [\n  {\n    id: '1',\n    fileName: 'document',\n    fromFormat: 'pdf',\n    toFormat: 'docx',\n    status: 'completed',\n  },\n  {\n    id: '2',\n    fileName: 'image',\n    fromFormat: 'jpg',\n    toFormat: 'png',\n    status: 'completed',\n  },\n  {\n    id: '3',\n    fileName: 'audio',\n    fromFormat: 'mp3',\n    toFormat: 'wav',\n    status: 'completed',\n  },\n];\n\nexport function RecentConversions() {\n  return (\n    <Card data-testid=\"card-recent-conversions\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-base\">\n          <Clock className=\"mr-2 h-4 w-4 text-primary\" />\n          Recent Conversions\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3 text-sm\">\n          {mockConversions.map((conversion) => (\n            <div \n              key={conversion.id}\n              className=\"flex items-center justify-between p-2 bg-muted rounded\"\n              data-testid={`conversion-${conversion.id}`}\n            >\n              <span data-testid={`text-conversion-${conversion.id}`}>\n                {conversion.fileName}.{conversion.fromFormat} → {conversion.fileName}.{conversion.toFormat}\n              </span>\n              {conversion.status === 'completed' && (\n                <Check className=\"h-4 w-4 text-accent\" data-testid={`icon-completed-${conversion.id}`} />\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1790},"client/src/components/converter/category-tabs.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ConversionCategory, categories } from '@/lib/conversion-tools';\nimport { FileText, Image, Volume2, Video, Archive, Settings } from 'lucide-react';\n\ninterface CategoryTabsProps {\n  activeCategory: ConversionCategory;\n  onCategoryChange: (category: ConversionCategory) => void;\n}\n\nconst iconMap = {\n  'file-text': FileText,\n  'image': Image,\n  'volume-2': Volume2,\n  'video': Video,\n  'archive': Archive,\n  'settings': Settings,\n};\n\nexport function CategoryTabs({ activeCategory, onCategoryChange }: CategoryTabsProps) {\n  return (\n    <div className=\"mb-8\" data-testid=\"category-tabs\">\n      <div className=\"border-b border-border\">\n        <nav className=\"flex space-x-8 overflow-x-auto pb-0\">\n          {categories.map((category) => {\n            const Icon = iconMap[category.icon as keyof typeof iconMap];\n            const isActive = activeCategory === category.id;\n            \n            return (\n              <Button\n                key={category.id}\n                variant=\"ghost\"\n                className={`\n                  whitespace-nowrap border-b-2 rounded-none py-4 px-2 font-medium text-sm\n                  ${isActive \n                    ? 'border-primary text-primary' \n                    : 'border-transparent text-muted-foreground hover:border-muted-foreground/50 hover:text-foreground'\n                  }\n                `}\n                onClick={() => onCategoryChange(category.id)}\n                data-testid={`button-category-${category.id}`}\n              >\n                <Icon className=\"mr-2 h-4 w-4\" />\n                {category.name}\n              </Button>\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1767},"client/src/components/converter/conversion-progress.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { FileUpload } from '@/types/converter';\n\ninterface ConversionProgressProps {\n  files: FileUpload[];\n}\n\nexport function ConversionProgress({ files }: ConversionProgressProps) {\n  const processingFiles = files.filter(file => \n    file.status === 'processing' || file.status === 'uploading'\n  );\n\n  if (processingFiles.length === 0) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mb-8\" data-testid=\"conversion-progress\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-converting-files\">\n          Converting Files...\n        </h3>\n        <div className=\"space-y-4\">\n          {processingFiles.map((file) => (\n            <div key={file.id} className=\"progress-item\" data-testid={`progress-${file.id}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium truncate\" data-testid={`text-progress-filename-${file.id}`}>\n                  {file.file.name}\n                </span>\n                <span className=\"text-xs text-muted-foreground\" data-testid={`text-progress-status-${file.id}`}>\n                  {file.status === 'processing' ? 'Converting...' : 'Uploading...'}\n                </span>\n              </div>\n              <Progress \n                value={file.progress} \n                className=\"w-full h-2\"\n                data-testid={`progress-bar-${file.id}`}\n              />\n              <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                <span data-testid={`text-progress-percent-${file.id}`}>{file.progress}%</span>\n                <span data-testid={`text-progress-time-${file.id}`}>\n                  {file.progress < 100 ? `${Math.ceil((100 - file.progress) / 10)} min remaining` : 'Complete'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2046},"client/src/components/converter/download-area.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { FileUpload } from '@/types/converter';\nimport { Download, Eye, CheckCircle, Archive } from 'lucide-react';\n\ninterface DownloadAreaProps {\n  files: FileUpload[];\n}\n\nexport function DownloadArea({ files }: DownloadAreaProps) {\n  const completedFiles = files.filter(file => \n    file.status === 'completed' && file.downloadUrl\n  );\n\n  if (completedFiles.length === 0) {\n    return null;\n  }\n\n  const handleDownload = (file: FileUpload) => {\n    if (file.downloadUrl) {\n      window.open(file.downloadUrl, '_blank');\n    }\n  };\n\n  const handleDownloadAll = () => {\n    // Create a ZIP file with all converted files\n    // TODO: Implement ZIP download functionality\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  return (\n    <Card className=\"mb-8 bg-accent/10 border-accent/20\" data-testid=\"download-area\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 text-accent flex items-center\" data-testid=\"text-conversion-complete\">\n          <CheckCircle className=\"mr-2 h-5 w-5\" />\n          Conversion Complete!\n        </h3>\n        <div className=\"space-y-3\">\n          {completedFiles.map((file) => (\n            <div \n              key={file.id} \n              className=\"flex items-center justify-between p-3 bg-background rounded-lg\"\n              data-testid={`download-item-${file.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-accent\" data-testid={`icon-success-${file.id}`} />\n                <div>\n                  <div className=\"font-medium text-sm\" data-testid={`text-converted-filename-${file.id}`}>\n                    {file.convertedFileName || `${file.file.name}.converted`}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\" data-testid={`text-converted-filesize-${file.id}`}>\n                    {formatFileSize(file.file.size)}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  size=\"sm\"\n                  onClick={() => handleDownload(file)}\n                  data-testid={`button-download-${file.id}`}\n                >\n                  <Download className=\"mr-1 h-4 w-4\" />\n                  Download\n                </Button>\n                <Button \n                  variant=\"secondary\"\n                  size=\"sm\"\n                  className=\"bg-secondary text-secondary-foreground hover:bg-secondary/80\"\n                  data-testid={`button-preview-${file.id}`}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n        {completedFiles.length > 1 && (\n          <div className=\"mt-4 text-center\">\n            <Button \n              className=\"bg-accent text-accent-foreground hover:bg-accent/90\"\n              onClick={handleDownloadAll}\n              data-testid=\"button-download-all\"\n            >\n              <Archive className=\"mr-2 h-4 w-4\" />\n              Download All as ZIP\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3658},"client/src/components/converter/file-preview.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { FileUpload } from '@/types/converter';\nimport { File, X, AlertCircle, CheckCircle } from 'lucide-react';\n\ninterface FilePreviewProps {\n  files: FileUpload[];\n  onRemoveFile: (fileId: string) => void;\n}\n\nexport function FilePreview({ files, onRemoveFile }: FilePreviewProps) {\n  if (files.length === 0) {\n    return null;\n  }\n\n  const getStatusBadge = (status: FileUpload['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" data-testid=\"badge-pending\">Pending</Badge>;\n      case 'uploading':\n        return <Badge variant=\"outline\" data-testid=\"badge-uploading\">Uploading</Badge>;\n      case 'uploaded':\n        return <Badge variant=\"secondary\" data-testid=\"badge-uploaded\">Uploaded</Badge>;\n      case 'processing':\n        return <Badge variant=\"secondary\" data-testid=\"badge-processing\">Processing</Badge>;\n      case 'completed':\n        return <Badge variant=\"default\" className=\"bg-accent\" data-testid=\"badge-completed\">Completed</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\" data-testid=\"badge-failed\">Failed</Badge>;\n      default:\n        return <Badge variant=\"outline\" data-testid=\"badge-unknown\">Unknown</Badge>;\n    }\n  };\n\n  const getStatusIcon = (status: FileUpload['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-accent\" data-testid=\"icon-check\" />;\n      case 'failed':\n        return <AlertCircle className=\"h-4 w-4 text-destructive\" data-testid=\"icon-error\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"mb-8\" data-testid=\"file-preview\">\n      <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"text-selected-files\">Selected Files</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {files.map((fileUpload) => (\n          <Card key={fileUpload.id} className=\"file-preview\" data-testid={`card-file-${fileUpload.id}`}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <File className=\"h-6 w-6 text-primary\" data-testid={`icon-file-${fileUpload.id}`} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-sm truncate\" data-testid={`text-filename-${fileUpload.id}`}>\n                    {fileUpload.file.name}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\" data-testid={`text-filesize-${fileUpload.id}`}>\n                    {formatBytes(fileUpload.file.size)}\n                  </div>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    {getStatusBadge(fileUpload.status)}\n                    {getStatusIcon(fileUpload.status)}\n                  </div>\n                  {fileUpload.error && (\n                    <div className=\"text-xs text-destructive mt-1\" data-testid={`text-error-${fileUpload.id}`}>\n                      {fileUpload.error}\n                    </div>\n                  )}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => onRemoveFile(fileUpload.id)}\n                  className=\"text-muted-foreground hover:text-destructive\"\n                  data-testid={`button-remove-${fileUpload.id}`}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n","size_bytes":4170},"client/src/components/converter/file-upload-zone.tsx":{"content":"import { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CloudUpload, Upload, CloudDownload } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FileUploadZoneProps {\n  onFilesAdded: (files: File[]) => void;\n  maxSize?: number; // in bytes\n  acceptedFileTypes?: string[];\n  disabled?: boolean;\n}\n\nexport function FileUploadZone({ \n  onFilesAdded, \n  maxSize = 100 * 1024 * 1024, // 100MB \n  acceptedFileTypes,\n  disabled = false \n}: FileUploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setIsDragOver(false);\n    onFilesAdded(acceptedFiles);\n  }, [onFilesAdded]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    maxSize,\n    accept: acceptedFileTypes ? \n      Object.fromEntries(acceptedFileTypes.map(type => [type, []])) : \n      undefined,\n    disabled,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n\n  return (\n    <Card \n      className={cn(\n        \"border-2 border-dashed transition-all duration-200 cursor-pointer\",\n        isDragActive || isDragOver ? \"border-primary bg-primary/5\" : \"border-border hover:border-primary/50\",\n        disabled && \"opacity-50 cursor-not-allowed\"\n      )}\n      data-testid=\"file-upload-zone\"\n    >\n      <CardContent className=\"p-8\">\n        <div {...getRootProps()} className=\"max-w-md mx-auto text-center\">\n          <input {...getInputProps()} data-testid=\"input-file-upload\" />\n          <CloudUpload className=\"mx-auto mb-4 h-12 w-12 text-muted-foreground\" data-testid=\"icon-cloud-upload\" />\n          <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-upload-title\">\n            Drop files here or click to upload\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-4\" data-testid=\"text-upload-description\">\n            Supports multiple files. Maximum file size: {Math.round(maxSize / (1024 * 1024))}MB per file.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-2 justify-center\">\n            <Button \n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              disabled={disabled}\n              data-testid=\"button-choose-files\"\n            >\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Choose Files\n            </Button>\n            <Button \n              variant=\"secondary\" \n              className=\"bg-secondary text-secondary-foreground hover:bg-secondary/80\"\n              disabled={disabled}\n              data-testid=\"button-from-cloud\"\n            >\n              <CloudDownload className=\"mr-2 h-4 w-4\" />\n              From Cloud\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2932},"client/src/components/converter/tool-grid.tsx":{"content":"import { Link } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ConversionTool } from '@/types/converter';\nimport { \n  FileText, Image, Volume2, Video, Archive, Settings,\n  FileImage, Music, Play, Folder, Eye, Mic, MessageCircle,\n  Book, BookOpen, Smartphone, Film, SquareFunction, \n  Headphones, Radio, Disc, Minimize, Globe, Minimize2,\n  FileSpreadsheet, Presentation, FileCode, FileType\n} from 'lucide-react';\n\ninterface ToolGridProps {\n  tools: ConversionTool[];\n}\n\nconst iconMap = {\n  'file-text': FileText,\n  'file-pdf': FileImage,\n  'file-word': FileText,\n  'file-excel': FileSpreadsheet,\n  'file-powerpoint': Presentation,\n  'file-alt': FileCode,\n  'file-csv': FileType,\n  'image': Image,\n  'vector-square': SquareFunction,\n  'smartphone': Smartphone,\n  'film': Film,\n  'compress': Minimize,\n  'volume-2': Volume2,\n  'music': Music,\n  'headphones': Headphones,\n  'radio': Radio,\n  'mic': Mic,\n  'message-circle': MessageCircle,\n  'video': Video,\n  'play': Play,\n  'minimize-2': Minimize2,\n  'globe': Globe,\n  'archive': Archive,\n  'folder': Folder,\n  'disc': Disc,\n  'minimize': Minimize,\n  'eye': Eye,\n  'book': Book,\n  'book-open': BookOpen,\n  'settings': Settings,\n};\n\nexport function ToolGrid({ tools }: ToolGridProps) {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-8\" data-testid=\"tool-grid\">\n      {tools.map((tool) => {\n        const Icon = iconMap[tool.icon as keyof typeof iconMap] || FileText;\n        \n        return (\n          <Link \n            key={tool.id} \n            href={tool.path}\n            data-testid={`link-tool-${tool.id}`}\n          >\n            <Card className=\"hover:shadow-md transition-all hover:scale-105 cursor-pointer\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <Icon className={`mx-auto mb-2 h-6 w-6 ${tool.iconColor}`} data-testid={`icon-${tool.id}`} />\n                  <div className=\"text-xs text-muted-foreground\" data-testid={`text-tool-name-${tool.id}`}>\n                    {tool.name}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2237},"client/src/components/layout/footer.tsx":{"content":"import { Link } from 'wouter';\nimport { ArrowRightLeft, Twitter, Facebook, Linkedin } from 'lucide-react';\nimport AdBanner from '@/components/common/ad-banner'; // ✅ Correct default import\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-muted border-t border-border mt-16\">\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Bottom Ad Banner - DISABLED: Replace with real slot ID */}\n        {/* <div className=\"mb-8\">\n          <AdBanner slot=\"REPLACE_WITH_REAL_SLOT_ID\" format=\"auto\" className=\"block w-full\" data-testid=\"ad-footer\" />\n        </div> */}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <ArrowRightLeft className=\"h-8 w-8 text-primary\" />\n              <span className=\"font-bold text-xl\">FileConverter</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              The fastest and most secure online file converter. Convert between 50+ formats for free.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-3\">Popular Tools</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/pdf-to-word\" className=\"text-muted-foreground hover:text-foreground\">PDF to Word</Link></li>\n              <li><Link href=\"/jpg-to-png\" className=\"text-muted-foreground hover:text-foreground\">JPG to PNG</Link></li>\n              <li><Link href=\"/mp4-to-mp3\" className=\"text-muted-foreground hover:text-foreground\">MP4 to MP3</Link></li>\n              <li><Link href=\"/word-to-pdf\" className=\"text-muted-foreground hover:text-foreground\">Word to PDF</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-3\">Categories</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/tools/documents\" className=\"text-muted-foreground hover:text-foreground\">Document Converter</Link></li>\n              <li><Link href=\"/tools/images\" className=\"text-muted-foreground hover:text-foreground\">Image Converter</Link></li>\n              <li><Link href=\"/tools/audio\" className=\"text-muted-foreground hover:text-foreground\">Audio Converter</Link></li>\n              <li><Link href=\"/tools/video\" className=\"text-muted-foreground hover:text-foreground\">Video Converter</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-3\">Company</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/about\" className=\"text-muted-foreground hover:text-foreground\">About Us</Link></li>\n              <li><Link href=\"/privacy-policy\" className=\"text-muted-foreground hover:text-foreground\">Privacy Policy</Link></li>\n              <li><Link href=\"/terms-of-service\" className=\"text-muted-foreground hover:text-foreground\">Terms of Service</Link></li>\n              <li><Link href=\"/contact\" className=\"text-muted-foreground hover:text-foreground\">Contact Us</Link></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border pt-6 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-sm text-muted-foreground\">© 2024 FileConverter. All rights reserved.</p>\n          <div className=\"flex space-x-4 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\"><Twitter className=\"h-5 w-5\" /></a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\"><Facebook className=\"h-5 w-5\" /></a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground\"><Linkedin className=\"h-5 w-5\" /></a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3832},"client/src/components/layout/header.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { useTheme } from '@/hooks/use-theme';\nimport { Menu, ArrowRightLeft, Sun, Moon } from 'lucide-react';\nimport AdBanner from '@/components/common/ad-banner'; // ✅ Correct default import\n\nexport function Header() {\n  const { theme, toggleTheme } = useTheme();\n  const [language, setLanguage] = useState('en');\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex h-14 items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <ArrowRightLeft className=\"h-8 w-8 text-primary\" />\n              <span className=\"font-bold text-xl\">FileConverter</span>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-home-nav\">\n              Home\n            </Link>\n            <Link href=\"/tools\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-tools\">\n              Tools\n            </Link>\n            <Link href=\"/about\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-about\">\n              About\n            </Link>\n            <Link href=\"/contact\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n              Contact\n            </Link>\n          </nav>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Language Selector */}\n            <Select value={language} onValueChange={setLanguage}>\n              <SelectTrigger className=\"w-16\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\">EN</SelectItem>\n                <SelectItem value=\"es\">ES</SelectItem>\n                <SelectItem value=\"fr\">FR</SelectItem>\n                <SelectItem value=\"de\">DE</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            {/* Dark Mode Toggle */}\n            <Button variant=\"ghost\" size=\"icon\" onClick={toggleTheme} data-testid=\"button-theme-toggle\">\n              {theme === 'light' ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n            </Button>\n            \n            {/* Mobile Menu */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px]\">\n                <nav className=\"flex flex-col space-y-4 mt-4\">\n                  <Link href=\"/\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-mobile-home\">\n                    Home\n                  </Link>\n                  <Link href=\"/tools\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-mobile-tools\">\n                    Tools\n                  </Link>\n                  <Link href=\"/about\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-mobile-about\">\n                    About\n                  </Link>\n                  <Link href=\"/contact\" className=\"text-sm font-medium text-foreground/80 hover:text-foreground transition-colors\" data-testid=\"link-mobile-contact\">\n                    Contact\n                  </Link>\n                </nav>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n      \n      {/* Top Ad Banner - DISABLED: Replace with real slot ID */}\n      {/* <div className=\"container mx-auto px-4 py-2\">\n        <AdBanner slot=\"REPLACE_WITH_REAL_SLOT_ID\" format=\"auto\" className=\"block w-full\" data-testid=\"ad-header\" />\n      </div> */}\n    </header>\n  );\n}\n","size_bytes":4699},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { ThemeProvider as CustomThemeProvider } from '@/hooks/use-theme';\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  return <CustomThemeProvider>{children}</CustomThemeProvider>;\n}\n","size_bytes":218},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# FileConverter\n\n## Overview\n\nFileConverter is a professional online file conversion web application that supports 50+ different file format conversions across documents, images, audio, video, and archives. The application provides a modern, responsive interface with features like drag-and-drop uploads, batch processing, real-time conversion progress, and secure temporary file storage. The platform is designed to be SEO-optimized with dedicated pages for each conversion tool and includes provisions for Google AdSense integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client is built using React with TypeScript and uses a modern component-based architecture:\n- **UI Framework**: React with Vite for fast development and building\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, accessible design\n- **State Management**: React hooks and TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing with SEO-friendly URLs\n- **Theme System**: Custom theme provider supporting light/dark modes\n- **File Handling**: Custom hooks for file upload, conversion tracking, and progress monitoring\n\n### Backend Architecture\nThe server follows a REST API pattern built on Express.js:\n- **Framework**: Express.js with TypeScript for type safety\n- **File Processing**: Modular converter services supporting multiple file formats\n- **Upload Handling**: Multer middleware for secure file uploads with size limits\n- **Storage Strategy**: Temporary file storage with automatic cleanup\n- **Session Management**: Session-based conversion tracking without user accounts\n\n### Database Design\nUses Drizzle ORM with PostgreSQL for data persistence:\n- **Users Table**: Optional user registration with username/password/email\n- **Conversions Table**: Tracks conversion history with metadata including file info, status, and download paths\n- **Schema**: Type-safe database operations with Zod validation\n\n### File Conversion Engine\nSupports 50+ conversion types across multiple categories:\n- **Documents**: PDF ↔ Word, Excel, PowerPoint, TXT conversions\n- **Images**: JPG, PNG, WEBP, SVG, HEIC format conversions with compression options\n- **Audio**: MP3, WAV, AAC, FLAC conversions with quality settings\n- **Video**: MP4, AVI, MOV, MKV conversions with compression and extraction features\n- **Archives**: ZIP, RAR, 7Z compression and extraction\n- **Specialized**: OCR (image to text), speech-to-text, text-to-speech capabilities\n\n### SEO Optimization\nComprehensive SEO strategy for search engine visibility:\n- **Individual Tool Pages**: Dedicated routes for each conversion type (e.g., /pdf-to-word)\n- **Meta Tags**: Dynamic title, description, and Open Graph tags per tool\n- **Structured Data**: JSON-LD markup for rich snippets and FAQ sections\n- **Performance**: Optimized loading with code splitting and asset optimization\n\n### Security Features\nEnterprise-grade security measures:\n- **File Upload Validation**: Type checking and size limits\n- **Temporary Storage**: Automatic file deletion after 24 hours\n- **HTTPS**: SSL encryption for all data transmission\n- **Input Sanitization**: Protection against malicious file uploads\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL with connection pooling\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n### File Processing Libraries\n- **Sharp**: High-performance image processing and conversion\n- **FFmpeg**: Video and audio conversion engine\n- **LibreOffice**: Document format conversions\n- **Archiver/Unzipper**: Archive file handling\n\n### UI Components\n- **Radix UI**: Accessible, unstyled component primitives\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form handling with validation\n- **React Dropzone**: Drag-and-drop file upload interface\n\n### Development Tools\n- **Vite**: Fast build tool with hot module replacement\n- **TypeScript**: Type safety across the entire application\n- **Tailwind CSS**: Utility-first CSS framework\n- **TanStack Query**: Server state management and caching\n\n### Cloud Storage Integration\n- Support planned for Google Drive, Dropbox, and OneDrive imports\n- Email delivery system for converted files\n- Analytics integration with Google Analytics for usage tracking\n\n### Advertisement System\n- Google AdSense integration points in header, sidebar, and footer\n- Clear separation between ads and functional elements\n- Mobile-responsive ad placements","size_bytes":4565}},"version":1}